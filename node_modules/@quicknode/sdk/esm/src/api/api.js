import fetch from 'cross-fetch';
import { CustomUrqlClient } from './graphql/customUrqlClient.js';
import { Client, fetchExchange } from '@urql/core';
import { cacheExchange } from '@urql/exchange-graphcache';
import { NftsController } from './controllers/nfts.js';
import { TokensController } from './controllers/tokens.js';
import { UtilsController } from './controllers/utils.js';
import { ContractsController } from './controllers/contracts.js';
import { EventsController } from './controllers/events.js';
import { DEFAULT_CHAIN } from './utils/constants.js';
import schema from './graphql/schema.json.js';
import { TransactionsController } from './controllers/transactions.js';
import packageJson from '../../package.json.js';

class API {
    constructor({ graphApiKey, additionalHeaders, defaultChain, } = {}) {
        if (!graphApiKey) {
            console.warn('QuickNode SDK warning: no apiKey provided. Access with no apiKey is heavily rate limited and intended for development use only. For higher rate limits or production usage, create an account on https://www.quicknode.com/');
        }
        this.graphApiKey = graphApiKey;
        this.additionalHeaders = additionalHeaders;
        this.urqlClient = this.createUrqlClient();
        this.customUrqlClient = new CustomUrqlClient(this.urqlClient);
        this.defaultChain = defaultChain || DEFAULT_CHAIN;
        this.nfts = new NftsController(this.customUrqlClient, this.defaultChain);
        this.tokens = new TokensController(this.customUrqlClient, this.defaultChain);
        this.utils = new UtilsController(this.customUrqlClient, this.defaultChain);
        this.contracts = new ContractsController(this.customUrqlClient, this.defaultChain);
        this.transactions = new TransactionsController(this.customUrqlClient, this.defaultChain);
        this.events = new EventsController(this.customUrqlClient, this.defaultChain);
        // Re-export the Urql client configured to use the Graph API for use with custom queries
        this.graphApiClient = this.urqlClient;
    }
    createUrqlClient() {
        const headers = { ...this.additionalHeaders };
        if (this.graphApiKey)
            headers['x-api-key'] = this.graphApiKey;
        headers['x-quicknode-sdk'] = 'js-sdk';
        headers['x-quicknode-sdk-version'] = packageJson?.version || 'n/a';
        const useNftKey = (data) => `${data['contractAddress']}:${data['tokenId']}`;
        const useAddressAsKey = (data) => `${data['address']}`;
        const useTransactionHashAndIndex = (data) => `${data['transactionHash']}:${data['transferIndex']}`;
        const urqlCache = cacheExchange({
            schema,
            keys: {
                EVMSchemaType: () => null,
                Collection: useAddressAsKey,
                CollectionOHLCVChart: () => null,
                Contract: useAddressAsKey,
                ERC721NFT: useNftKey,
                ERC721Collection: useAddressAsKey,
                ERC1155NFT: useNftKey,
                ERC1155Collection: useAddressAsKey,
                GasPrice: () => null,
                NFT: useNftKey,
                NFTContract: useAddressAsKey,
                TokenAttribute: () => null,
                TokenContract: useAddressAsKey,
                TokenEvent: useTransactionHashAndIndex,
                TokenMintEvent: useTransactionHashAndIndex,
                TokenBurnEvent: useTransactionHashAndIndex,
                TokenSaleEvent: useTransactionHashAndIndex,
                TokenSwapEvent: useTransactionHashAndIndex,
                TokenTransferEvent: useTransactionHashAndIndex,
                TokenUpload: () => null,
                OpenSeaMetadata: () => null,
                Transaction: (data) => `${data['hash']}`,
                TrendingCollection: () => null,
                Wallet: (data) => `${data['address']}`,
                WalletNFT: () => null,
                WalletTokenBalance: () => null,
            },
        });
        const client = new Client({
            fetch,
            url: process.env['NX_GRAPHQL_API_URI'] ||
                'https://api.quicknode.com/graphql',
            exchanges: [urqlCache, fetchExchange],
            fetchOptions: () => ({ headers }),
        });
        return client;
    }
}

export { API };
