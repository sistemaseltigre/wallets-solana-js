import { __decorate, __metadata } from 'tslib';
import { DEFAULT_CHAIN } from '../utils/constants.js';
import { balancesByWalletAddressValidator } from '../types/tokens/getBalancesByWalletAddress.js';
import { CodegenEthMainnetBalancesByWalletENSDocument, CodegenPolygonMainnetBalancesByWalletENSDocument, CodegenEthSepoliaBalancesByWalletENSDocument, CodegenEthMainnetBalancesByWalletAddressDocument, CodegenPolygonMainnetBalancesByWalletAddressDocument, CodegenEthSepoliaBalancesByWalletAddressDocument } from '../graphql/generatedTypes.js';
import { emptyPageInfo } from '../utils/helpers.js';
import { formatQueryResult } from '../utils/postQueryFormatter.js';
import { isValidENSAddress } from '../utils/isValidENSAddress.js';
import { ValidateInput } from '../../lib/validation/ValidateInput.js';

class TokensController {
    constructor(client, defaultChain = DEFAULT_CHAIN) {
        this.client = client;
        this.defaultChain = defaultChain;
    }
    async getBalancesByWallet(variables) {
        const { address, ...allVariables } = variables;
        if (isValidENSAddress(address)) {
            return this.getBalancesByWalletENS({
                ensName: address,
                ...allVariables,
            });
        }
        return this.getBalancesByWalletAddress({
            address,
            ...allVariables,
        });
    }
    async getBalancesByWalletENS(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = {
            ethereum: CodegenEthMainnetBalancesByWalletENSDocument,
            polygon: CodegenPolygonMainnetBalancesByWalletENSDocument,
            ethereumSepolia: CodegenEthSepoliaBalancesByWalletENSDocument,
        };
        const { data: { [userChain]: { walletByENS }, }, } = await this.client.query({
            variables: queryVariables,
            query: query[userChain],
        });
        if (!walletByENS?.tokenBalances?.length) {
            // Address can still be valid ENS name, but not have any balances
            const address = walletByENS?.address || '';
            const ensName = walletByENS?.ensName || '';
            return {
                address: address,
                ensName: ensName,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(walletByENS, 'tokenBalances', 'tokenBalancesPageInfo', null, this.flattenBalanceResponses // Remove the "contract" key and move info to balance result body
        );
        return formattedResult;
    }
    async getBalancesByWalletAddress(variables) {
        const { chain, ...queryVariables } = variables;
        const userChain = chain || this.defaultChain;
        const query = {
            ethereum: CodegenEthMainnetBalancesByWalletAddressDocument,
            polygon: CodegenPolygonMainnetBalancesByWalletAddressDocument,
            ethereumSepolia: CodegenEthSepoliaBalancesByWalletAddressDocument,
        };
        const { data: { [userChain]: { walletByAddress }, }, } = await this.client.query({
            variables: queryVariables,
            query: query[userChain],
        });
        if (!walletByAddress?.tokenBalances?.length) {
            // Address can still be valid address, but not have any balances
            const address = walletByAddress?.address || '';
            const ensName = walletByAddress?.ensName || '';
            return {
                address: address,
                ensName: ensName,
                results: [],
                pageInfo: emptyPageInfo,
            };
        }
        const formattedResult = formatQueryResult(walletByAddress, 'tokenBalances', 'tokenBalancesPageInfo', null, this.flattenBalanceResponses // Remove the "contract" key and move info to balance result body
        );
        return formattedResult;
    }
    flattenBalanceResponses(response) {
        const modifiedResults = response.results.map((result) => {
            const { contract: { ...contractInfo }, ...balanceInfo } = result;
            return { ...balanceInfo, ...contractInfo };
        });
        response.results = modifiedResults;
        return response;
    }
}
__decorate([
    ValidateInput(balancesByWalletAddressValidator),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], TokensController.prototype, "getBalancesByWallet", null);

export { TokensController };
