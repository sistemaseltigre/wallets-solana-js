import { Client, GraphQLRequestParams } from '@urql/core';
export { gql } from '@urql/core';
import * as _urql_core_dist_urql_core_chunk from '@urql/core/dist/urql-core-chunk';
import { z, ZodError } from 'zod';
import { Chain, PublicClient } from 'viem';
import * as viem from 'viem';
export { viem };

type Maybe<T> = T | null;
type InputMaybe<T> = Maybe<T>;
type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    BigInt: any;
    DateTime: any;
    JSON: any;
    JSONObject: any;
};
/** Gas Prices for a given block. Gas values are returned in Wei. */
type CodegenGasPrice = {
    /** The average gas price */
    average: Scalars['Float'];
    /** The block number */
    blockNumber: Scalars['Int'];
    /** The highest gas price */
    ceiling: Scalars['Float'];
    /** The lowest gas price */
    floor: Scalars['Float'];
    /** The median gas price */
    median: Scalars['Float'];
    /** The total gas price */
    total: Scalars['Float'];
};
/** Marketplace where the token was sold */
type CodegenMarketplace = 'BLUR' | 'CRYPTOPUNKS' | 'LOOKSRARE' | 'NIFTY_GATEWAY' | 'OPENSEA' | 'SEAPORT' | 'X2Y2' | 'ZEROX';
type CodegenTokenTransferType = 'BURN' | 'MINT' | 'SALE' | 'SWAP' | 'TRANSFER';
/** Filter of nfts in a wallet by contract address and optional token id. Results are returned if any of the conditions are matched. */
type CodegenWalletNFTsContractTokenFilterInput = {
    contractAddress: Scalars['String'];
    tokenId?: InputMaybe<Scalars['String']>;
};
/** Filter of nfts in a wallet */
type CodegenWalletNFTsFilterInput = {
    contractTokens?: InputMaybe<Array<CodegenWalletNFTsContractTokenFilterInput>>;
};
type CodegenEthMainnetWalletNFTsByEnsQueryVariables = Exact<{
    ensName: Scalars['String'];
    before?: InputMaybe<Scalars['String']>;
    after?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    filter?: InputMaybe<CodegenWalletNFTsFilterInput>;
}>;
type CodegenEthMainnetBalancesByWalletENSQueryVariables = Exact<{
    ensName: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    before?: InputMaybe<Scalars['String']>;
    after?: InputMaybe<Scalars['String']>;
}>;
type CodegenEthMainnetTransactionsByWalletENSQueryVariables = Exact<{
    ensName: Scalars['String'];
    first?: InputMaybe<Scalars['Int']>;
    before?: InputMaybe<Scalars['String']>;
    after?: InputMaybe<Scalars['String']>;
}>;
type CodegenNftCollectionInfoFragment = {
    collection?: {
        address: string;
        baseTokenUri?: string | null;
        circulatingSupply?: any | null;
        description?: string | null;
        externalUrl?: string | null;
        name?: string | null;
        slug?: string | null;
        symbol?: string | null;
        totalSupply?: any | null;
        twitterUsername?: string | null;
        bannerImage?: Array<{
            height?: number | null;
            mimeType?: string | null;
            url: string;
            width?: number | null;
        }> | null;
        contract?: {
            address: string;
            isVerified?: boolean | null;
            name?: string | null;
            symbol?: string | null;
            supportedErcInterfaces?: Array<string> | null;
        } | null;
        image?: Array<{
            height?: number | null;
            mimeType?: string | null;
            url: string;
            width?: number | null;
        }> | null;
        ohlcvChart?: Array<{
            average?: number | null;
            close?: number | null;
            count: number;
            high?: number | null;
            low?: number | null;
            open?: number | null;
            volume?: number | null;
            timestamp: any;
        }> | null;
        openseaMetadata?: {
            isHidden?: boolean | null;
            isVerified?: boolean | null;
            unsafeSlug?: string | null;
        } | null;
    } | {
        address: string;
        baseTokenUri?: string | null;
        circulatingSupply?: any | null;
        description?: string | null;
        externalUrl?: string | null;
        name?: string | null;
        slug?: string | null;
        symbol?: string | null;
        totalSupply?: any | null;
        twitterUsername?: string | null;
        bannerImage?: Array<{
            height?: number | null;
            mimeType?: string | null;
            url: string;
            width?: number | null;
        }> | null;
        contract?: {
            address: string;
            isVerified?: boolean | null;
            name?: string | null;
            symbol?: string | null;
            supportedErcInterfaces?: Array<string> | null;
        } | null;
        image?: Array<{
            height?: number | null;
            mimeType?: string | null;
            url: string;
            width?: number | null;
        }> | null;
        ohlcvChart?: Array<{
            average?: number | null;
            close?: number | null;
            count: number;
            high?: number | null;
            low?: number | null;
            open?: number | null;
            volume?: number | null;
            timestamp: any;
        }> | null;
        openseaMetadata?: {
            isHidden?: boolean | null;
            isVerified?: boolean | null;
            unsafeSlug?: string | null;
        } | null;
    } | null;
};
type CodegenNftDetailsFragment = {
    nft?: {
        __typename: 'ERC721NFT';
        animationUrl?: string | null;
        collectionSlug?: string | null;
        contractAddress: string;
        description?: string | null;
        externalUrl?: string | null;
        metadata?: any | null;
        name?: string | null;
        tokenId: any;
        wallet?: {
            address: string;
            ensName?: string | null;
        } | null;
    } | {
        __typename: 'ERC1155NFT';
        animationUrl?: string | null;
        collectionSlug?: string | null;
        contractAddress: string;
        description?: string | null;
        externalUrl?: string | null;
        metadata?: any | null;
        name?: string | null;
        tokenId: any;
        wallets: {
            edges: Array<{
                node: {
                    address: string;
                    ensName?: string | null;
                };
            }>;
        };
    } | null;
};
type CodegenERC1155NFTNodeFragment = {
    __typename: 'ERC1155NFT';
    animationUrl?: string | null;
    collectionSlug?: string | null;
    contractAddress: string;
    description?: string | null;
    externalUrl?: string | null;
    metadata?: any | null;
    name?: string | null;
    tokenId: any;
    wallets: {
        edges: Array<{
            node: {
                address: string;
                ensName?: string | null;
            };
        }>;
    };
};
type CodegenERC721NFTNodeFragment = {
    __typename: 'ERC721NFT';
    animationUrl?: string | null;
    collectionSlug?: string | null;
    contractAddress: string;
    description?: string | null;
    externalUrl?: string | null;
    metadata?: any | null;
    name?: string | null;
    tokenId: any;
    attributes?: Array<{
        name: string;
        value: string;
    }> | null;
    wallet?: {
        address: string;
        ensName?: string | null;
    } | null;
};
type CodegenTransactionsNodeFragment = {
    blockNumber: number;
    blockTimestamp: any;
    contractAddress?: string | null;
    fromAddress: string;
    cumulativeGasUsed: any;
    effectiveGasPrice?: any | null;
    gas?: any | null;
    gasPrice?: any | null;
    gasUsed: any;
    hash: string;
    maxFeePerGas?: any | null;
    maxPriorityFeePerGas?: any | null;
    toAddress?: string | null;
    type?: string | null;
    input?: string | null;
    transactionIndex: number;
    value?: any | null;
};
type CodegenTrendingCollectionInfo_CodegenERC721Collection_CodegenFragment = {
    address: string;
    baseTokenUri?: string | null;
    circulatingSupply?: any | null;
    description?: string | null;
    externalUrl?: string | null;
    name?: string | null;
    symbol?: string | null;
    totalSupply?: any | null;
    twitterUsername?: string | null;
    image?: Array<{
        height?: number | null;
        mimeType?: string | null;
        url: string;
        width?: number | null;
    }> | null;
    openseaMetadata?: {
        isHidden?: boolean | null;
        isVerified?: boolean | null;
        unsafeSlug?: string | null;
    } | null;
};
type CodegenTrendingCollectionInfo_CodegenERC1155Collection_CodegenFragment = {
    address: string;
    baseTokenUri?: string | null;
    circulatingSupply?: any | null;
    description?: string | null;
    externalUrl?: string | null;
    name?: string | null;
    symbol?: string | null;
    totalSupply?: any | null;
    twitterUsername?: string | null;
    image?: Array<{
        height?: number | null;
        mimeType?: string | null;
        url: string;
        width?: number | null;
    }> | null;
    openseaMetadata?: {
        isHidden?: boolean | null;
        isVerified?: boolean | null;
        unsafeSlug?: string | null;
    } | null;
};
type CodegenTrendingCollectionInfoFragment = CodegenTrendingCollectionInfo_CodegenERC721Collection_CodegenFragment | CodegenTrendingCollectionInfo_CodegenERC1155Collection_CodegenFragment;
type CodegenWalletNFTNodeFragment = {
    nft?: {
        animationUrl?: string | null;
        collectionSlug?: string | null;
        contractAddress: string;
        description?: string | null;
        externalUrl?: string | null;
        metadata?: any | null;
        name?: string | null;
        tokenId: any;
    } | {
        animationUrl?: string | null;
        collectionSlug?: string | null;
        contractAddress: string;
        description?: string | null;
        externalUrl?: string | null;
        metadata?: any | null;
        name?: string | null;
        tokenId: any;
    } | null;
};
type CodegenContractInfo_CodegenNFTContract_CodegenFragment = {
    __typename: 'NFTContract';
    abi?: any | null;
    address: string;
    isVerified?: boolean | null;
    name?: string | null;
    supportedErcInterfaces?: Array<string> | null;
    symbol?: string | null;
};
type CodegenContractInfo_CodegenTokenContract_CodegenFragment = {
    __typename: 'TokenContract';
    decimals?: any | null;
    abi?: any | null;
    address: string;
    isVerified?: boolean | null;
    name?: string | null;
    supportedErcInterfaces?: Array<string> | null;
    symbol?: string | null;
};
type CodegenContractInfoFragment = CodegenContractInfo_CodegenNFTContract_CodegenFragment | CodegenContractInfo_CodegenTokenContract_CodegenFragment;
type CodegenTokenBalanceNodeFragment = {
    totalBalance: any;
    contract?: {
        address: string;
        decimals?: any | null;
        name?: string | null;
        symbol?: string | null;
    } | null;
};
type CodegenTokenEventInfo_CodegenTokenBurnEvent_CodegenFragment = {
    __typename: 'TokenBurnEvent';
    tokenId?: any | null;
    tokenQuantity: any;
    blockNumber: number;
    fromAddress: string;
    timestamp: any;
    toAddress: string;
    transactionHash?: string | null;
    transferIndex: number;
    type: CodegenTokenTransferType;
};
type CodegenTokenEventInfo_CodegenTokenMintEvent_CodegenFragment = {
    __typename: 'TokenMintEvent';
    tokenQuantity: any;
    blockNumber: number;
    fromAddress: string;
    timestamp: any;
    toAddress: string;
    transactionHash?: string | null;
    transferIndex: number;
    type: CodegenTokenTransferType;
};
type CodegenTokenEventInfo_CodegenTokenSaleEvent_CodegenFragment = {
    __typename: 'TokenSaleEvent';
    marketplace?: CodegenMarketplace | null;
    receivedTokenContractAddress?: string | null;
    receivedTokenId?: any | null;
    sentTokenId?: any | null;
    blockNumber: number;
    fromAddress: string;
    timestamp: any;
    toAddress: string;
    transactionHash?: string | null;
    transferIndex: number;
    type: CodegenTokenTransferType;
};
type CodegenTokenEventInfo_CodegenTokenSwapEvent_CodegenFragment = {
    __typename: 'TokenSwapEvent';
    blockNumber: number;
    fromAddress: string;
    timestamp: any;
    toAddress: string;
    transactionHash?: string | null;
    transferIndex: number;
    type: CodegenTokenTransferType;
};
type CodegenTokenEventInfo_CodegenTokenTransferEvent_CodegenFragment = {
    __typename: 'TokenTransferEvent';
    tokenId?: any | null;
    contractAddress: string;
    tokenQuantity: any;
    blockNumber: number;
    fromAddress: string;
    timestamp: any;
    toAddress: string;
    transactionHash?: string | null;
    transferIndex: number;
    type: CodegenTokenTransferType;
};
type CodegenTokenEventInfoFragment = CodegenTokenEventInfo_CodegenTokenBurnEvent_CodegenFragment | CodegenTokenEventInfo_CodegenTokenMintEvent_CodegenFragment | CodegenTokenEventInfo_CodegenTokenSaleEvent_CodegenFragment | CodegenTokenEventInfo_CodegenTokenSwapEvent_CodegenFragment | CodegenTokenEventInfo_CodegenTokenTransferEvent_CodegenFragment;
type CodegenPaginationFragment = {
    endCursor?: string | null;
    hasNextPage: boolean;
    hasPreviousPage: boolean;
    startCursor?: string | null;
};

type ResultOutput = Record<string | number | symbol, any>;

declare class CustomUrqlClient {
    urqlClient: Client;
    constructor(urqlClient: Client);
    query<TVariables extends Record<string, any>, KResults extends Record<string, any>, KResultsOutput extends ResultOutput>(options: GraphQLRequestParams<any, TVariables>): Promise<{
        data: any;
        operation: _urql_core_dist_urql_core_chunk.Operation<any, Record<string, any> | TVariables>;
        error?: _urql_core_dist_urql_core_chunk.CombinedError | undefined;
        extensions?: Record<string, any> | undefined;
        stale: boolean;
        hasNext: boolean;
    }>;
}

declare const supportedChains: readonly ["ethereum", "polygon", "ethereumSepolia"];
type ChainName = (typeof supportedChains)[number];

type SimplifyType<T> = T extends object ? {
    [K in keyof T]: SimplifyType<T[K]>;
} : T;

declare const walletByAddressValidator: z.ZodObject<{
    filter: z.ZodOptional<z.ZodObject<{
        contractTokens: z.ZodArray<z.ZodObject<{
            contractAddress: z.ZodString;
            tokenId: z.ZodOptional<z.ZodString>;
        }, "strict", z.ZodTypeAny, {
            contractAddress: string;
            tokenId?: string | undefined;
        }, {
            contractAddress: string;
            tokenId?: string | undefined;
        }>, "atleastone">;
    }, "strict", z.ZodTypeAny, {
        contractTokens: [{
            contractAddress: string;
            tokenId?: string | undefined;
        }, ...{
            contractAddress: string;
            tokenId?: string | undefined;
        }[]];
    }, {
        contractTokens: [{
            contractAddress: string;
            tokenId?: string | undefined;
        }, ...{
            contractAddress: string;
            tokenId?: string | undefined;
        }[]];
    }>>;
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    address: string;
    filter?: {
        contractTokens: [{
            contractAddress: string;
            tokenId?: string | undefined;
        }, ...{
            contractAddress: string;
            tokenId?: string | undefined;
        }[]];
    } | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    address: string;
    filter?: {
        contractTokens: [{
            contractAddress: string;
            tokenId?: string | undefined;
        }, ...{
            contractAddress: string;
            tokenId?: string | undefined;
        }[]];
    } | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type WalletNFTsByAddressInput = z.infer<typeof walletByAddressValidator>;
type WalletNFTsByAddressResult = SimplifyType<{
    address: string;
    ensName: string;
    results: CodegenWalletNFTNodeFragment['nft'][];
    pageInfo: CodegenPaginationFragment;
}>;

declare const nftDetailsValidator: z.ZodObject<{
    contractAddress: z.ZodString;
    tokenId: z.ZodString;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    contractAddress: string;
    tokenId: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    contractAddress: string;
    tokenId: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type NFTDetailsInput = z.infer<typeof nftDetailsValidator>;
type NFTDetailsResult = SimplifyType<{
    nft: CodegenNftDetailsFragment['nft'];
}>;

declare const nftCollectionDetailsValidator: z.ZodObject<{
    contractAddress: z.ZodString;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    contractAddress: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    contractAddress: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type NftCollectionDetailsInput = z.infer<typeof nftCollectionDetailsValidator>;
type NftCollectionDetailsResult = SimplifyType<{
    collection: CodegenNftCollectionInfoFragment['collection'];
}>;

declare const nftTrendingCollectionsValidator: z.ZodObject<{
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type NFTTrendingCollectionsInput = z.infer<typeof nftTrendingCollectionsValidator>;
type NFTTrendingCollectionResult = SimplifyType<{
    results: CodegenTrendingCollectionInfoFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

type NftErcStandards = 'ERC721' | 'ERC1155';

declare const nftsByContractAddressValidator: z.ZodObject<{
    contractAddress: z.ZodString;
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    contractAddress: string;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    contractAddress: string;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type NFTsByContractAddressInput = z.infer<typeof nftsByContractAddressValidator>;
type NFTsByContractAddressResult = SimplifyType<{
    standard: NftErcStandards | null;
    results: [CodegenERC721NFTNodeFragment | CodegenERC1155NFTNodeFragment][];
    pageInfo: CodegenPaginationFragment;
}>;

declare const verifyOwnershipValidator: z.ZodObject<{
    address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    nfts: z.ZodArray<z.ZodObject<{
        contractAddress: z.ZodString;
        tokenId: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        contractAddress: string;
        tokenId?: string | undefined;
    }, {
        contractAddress: string;
        tokenId?: string | undefined;
    }>, "atleastone">;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    address: string;
    nfts: [{
        contractAddress: string;
        tokenId?: string | undefined;
    }, ...{
        contractAddress: string;
        tokenId?: string | undefined;
    }[]];
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    address: string;
    nfts: [{
        contractAddress: string;
        tokenId?: string | undefined;
    }, ...{
        contractAddress: string;
        tokenId?: string | undefined;
    }[]];
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type VerifyOwnershipByAddressInput = z.infer<typeof verifyOwnershipValidator>;

declare class NftsController {
    private client;
    private defaultChain;
    constructor(client: CustomUrqlClient, defaultChain?: ChainName);
    getByWallet(variables: WalletNFTsByAddressInput): Promise<WalletNFTsByAddressResult>;
    private getByWalletENS;
    private getByWalletAddress;
    getTrendingCollections(variables: NFTTrendingCollectionsInput): Promise<NFTTrendingCollectionResult>;
    getByContractAddress(variables: NFTsByContractAddressInput): Promise<NFTsByContractAddressResult>;
    getNFTDetails(variables: NFTDetailsInput): Promise<NFTDetailsResult>;
    getCollectionDetails(variables: NftCollectionDetailsInput): Promise<NftCollectionDetailsResult>;
    verifyOwnership(variables: VerifyOwnershipByAddressInput): Promise<boolean>;
    private verifyOwnershipByAddress;
    private verifyOwnershipByENS;
}

type NonQueryInput = {
    chain?: ChainName | null;
};

type BalancesByWalletENSInput = CodegenEthMainnetBalancesByWalletENSQueryVariables & NonQueryInput;
type BalancesByWalletENSResult = SimplifyType<{
    address: string;
    ensName: string;
    results: CodegenTokenBalanceNodeFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare const balancesByWalletAddressValidator$1: z.ZodObject<{
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    address: string;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    address: string;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type BalancesByWalletAddressInput = z.infer<typeof balancesByWalletAddressValidator$1>;
type BalancesByWalletAddressResult = SimplifyType<{
    address: string;
    ensName: string;
    results: CodegenTokenBalanceNodeFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare class TokensController {
    private client;
    private defaultChain;
    constructor(client: CustomUrqlClient, defaultChain?: ChainName);
    getBalancesByWallet(variables: BalancesByWalletAddressInput): Promise<BalancesByWalletENSResult>;
    private getBalancesByWalletENS;
    private getBalancesByWalletAddress;
    private flattenBalanceResponses;
}

declare const gasPricesValidator: z.ZodObject<{
    filter: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        blockNumber: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }>>>;
    }, "strict", z.ZodTypeAny, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
    }, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
    }>>>;
    returnInGwei: z.ZodOptional<z.ZodNullable<z.ZodBoolean>>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    returnInGwei?: boolean | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    returnInGwei?: boolean | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type GasPricesInput = z.infer<typeof gasPricesValidator>;
type GasPricesResult = SimplifyType<{
    gasPrices: CodegenGasPrice[];
}>;

declare class UtilsController {
    private client;
    private defaultChain;
    constructor(client: CustomUrqlClient, defaultChain?: ChainName);
    getGasPrices(variables: GasPricesInput): Promise<GasPricesResult>;
}

declare const contractDetailsValidator: z.ZodObject<{
    contractAddress: z.ZodString;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    contractAddress: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    contractAddress: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type ContractDetailsInput = z.infer<typeof contractDetailsValidator>;
type ContractDetailsResult = SimplifyType<{
    contract: CodegenContractInfoFragment | null;
}>;

declare class ContractsController {
    private client;
    private defaultChain;
    constructor(client: CustomUrqlClient, defaultChain?: ChainName);
    getDetails(variables: ContractDetailsInput): Promise<ContractDetailsResult>;
}

declare const contractEventsValidator: z.ZodObject<{
    contractAddress: z.ZodString;
    filter: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        blockNumber: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }>>>;
        contractAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        contractStandard: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }>>>;
        fromAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        marketplace: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }>>>;
        timestamp: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        toAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        transactionHash: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }>>>;
        walletAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
    }, "strict", z.ZodTypeAny, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }>>>;
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    contractAddress: string;
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    contractAddress: string;
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type ContractEventsInput = z.infer<typeof contractEventsValidator>;
type ContractEventsResult = SimplifyType<{
    results: CodegenTokenEventInfoFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare const collectionEventsValidator: z.ZodObject<{
    contractAddress: z.ZodString;
    filter: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        blockNumber: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }>>>;
        contractAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        contractStandard: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }>>>;
        fromAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        marketplace: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }>>>;
        timestamp: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        toAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        transactionHash: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }>>>;
        walletAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
    }, "strict", z.ZodTypeAny, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }>>>;
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    contractAddress: string;
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    contractAddress: string;
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type CollectionEventsInput = z.infer<typeof collectionEventsValidator>;
type CollectionEventsResult = SimplifyType<{
    results: CodegenTokenEventInfoFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare const nftEventsValidator: z.ZodObject<{
    contractAddress: z.ZodString;
    filter: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        blockNumber: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }>>>;
        contractAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        contractStandard: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }>>>;
        fromAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        marketplace: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }>>>;
        timestamp: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        toAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        transactionHash: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }>>>;
        walletAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
    }, "strict", z.ZodTypeAny, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }>>>;
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    tokenId: z.ZodString;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    contractAddress: string;
    tokenId: string;
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    contractAddress: string;
    tokenId: string;
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type NFTEventsInput = z.infer<typeof nftEventsValidator>;
type NFTEventsResult = SimplifyType<{
    results: CodegenTokenEventInfoFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare const allEventsValidator: z.ZodObject<{
    filter: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        blockNumber: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }>>>;
        contractAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        contractStandard: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["ERC20", "ERC721", "ERC1155"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }, {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        }>>>;
        fromAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        marketplace: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["BLUR", "CRYPTOPUNKS", "LOOKSRARE", "NIFTY_GATEWAY", "OPENSEA", "SEAPORT", "X2Y2", "ZEROX"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }, {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        }>>>;
        timestamp: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        toAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        transactionHash: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        type: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["TRANSFER", "MINT", "SALE", "SWAP", "BURN"]>, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }, {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        }>>>;
        walletAddress: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
    }, "strict", z.ZodTypeAny, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    }>>>;
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        contractAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        contractStandard?: {
            eq?: "ERC721" | "ERC1155" | "ERC20" | null | undefined;
            in?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
            notIn?: ("ERC721" | "ERC1155" | "ERC20")[] | null | undefined;
        } | null | undefined;
        fromAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        marketplace?: {
            eq?: "BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX" | null | undefined;
            in?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
            notIn?: ("BLUR" | "CRYPTOPUNKS" | "LOOKSRARE" | "NIFTY_GATEWAY" | "OPENSEA" | "SEAPORT" | "X2Y2" | "ZEROX")[] | null | undefined;
        } | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        transactionHash?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        type?: {
            eq?: "BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER" | null | undefined;
            in?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
            notIn?: ("BURN" | "MINT" | "SALE" | "SWAP" | "TRANSFER")[] | null | undefined;
        } | null | undefined;
        walletAddress?: {
            eq?: string | null | undefined;
            in?: string[] | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
    } | null | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type AllEventsInput = z.infer<typeof allEventsValidator>;
type AllEventsResult = SimplifyType<{
    results: CodegenTokenEventInfoFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare class EventsController {
    private client;
    private defaultChain;
    constructor(client: CustomUrqlClient, defaultChain?: ChainName);
    getByContract(variables: ContractEventsInput): Promise<ContractEventsResult>;
    getByNFTCollection(variables: CollectionEventsInput): Promise<CollectionEventsResult>;
    getByNFT(variables: NFTEventsInput): Promise<NFTEventsResult>;
    getAll(variables: AllEventsInput): Promise<AllEventsResult>;
}

declare const balancesByWalletAddressValidator: z.ZodObject<{
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    address: z.ZodUnion<[z.ZodEffects<z.ZodString, string, string>, z.ZodString]>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    address: string;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    address: string;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type TransactionsByWalletAddressInput = z.infer<typeof balancesByWalletAddressValidator>;
type TransactionsByWalletAddressResult = SimplifyType<{
    address: string;
    ensName: string;
    results: CodegenTransactionsNodeFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare const transactionsBySearchValidator: z.ZodObject<{
    filter: z.ZodOptional<z.ZodObject<{
        blockNumber: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodNumber, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }, {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        }>>>;
        fromAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        timestamp: z.ZodOptional<z.ZodNullable<z.ZodObject<{
            eq: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            gte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            in: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
            lt: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            lte: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            notIn: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
        }, "strict", z.ZodTypeAny, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }, {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        }>>>;
        toAddress: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    }, "strict", z.ZodTypeAny, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        fromAddress?: string | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: string | null | undefined;
    }, {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        fromAddress?: string | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: string | null | undefined;
    }>>;
    before: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    after: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    first: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        fromAddress?: string | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: string | null | undefined;
    } | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    filter?: {
        blockNumber?: {
            eq?: number | null | undefined;
            gt?: number | null | undefined;
            gte?: number | null | undefined;
            in?: number[] | null | undefined;
            lt?: number | null | undefined;
            lte?: number | null | undefined;
            notIn?: number[] | null | undefined;
        } | null | undefined;
        fromAddress?: string | null | undefined;
        timestamp?: {
            eq?: string | null | undefined;
            gt?: string | null | undefined;
            gte?: string | null | undefined;
            in?: string[] | null | undefined;
            lt?: string | null | undefined;
            lte?: string | null | undefined;
            notIn?: string[] | null | undefined;
        } | null | undefined;
        toAddress?: string | null | undefined;
    } | undefined;
    before?: string | null | undefined;
    after?: string | null | undefined;
    first?: number | null | undefined;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type TransactionsBySearchInput = z.infer<typeof transactionsBySearchValidator>;
type TransactionsBySearchResult = SimplifyType<{
    results: CodegenTransactionsNodeFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare const transactionsByHashValidator: z.ZodObject<{
    hash: z.ZodString;
    chain: z.ZodOptional<z.ZodNullable<z.ZodEnum<["ethereum", "polygon", "ethereumSepolia"]>>>;
}, "strict", z.ZodTypeAny, {
    hash: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}, {
    hash: string;
    chain?: "ethereum" | "ethereumSepolia" | "polygon" | null | undefined;
}>;
type TransactionsByHashInput = z.infer<typeof transactionsByHashValidator>;
type TransactionsByHashResult = SimplifyType<{
    transaction: CodegenTransactionsNodeFragment | null;
}>;

declare class TransactionsController {
    private client;
    private defaultChain;
    constructor(client: CustomUrqlClient, defaultChain?: ChainName);
    getByWallet(variables: TransactionsByWalletAddressInput): Promise<TransactionsByWalletAddressResult>;
    private getByWalletAddress;
    private getByWalletENS;
    getAll(variables: TransactionsBySearchInput): Promise<TransactionsBySearchResult>;
    getByHash(variables: TransactionsByHashInput): Promise<TransactionsByHashResult>;
}

interface ApiArguments {
    graphApiKey?: string;
    additionalHeaders?: Record<string, string>;
    defaultChain?: ChainName;
}
declare class API {
    readonly urqlClient: Client;
    private customUrqlClient;
    private graphApiKey?;
    private additionalHeaders?;
    readonly defaultChain: ChainName;
    readonly nfts: NftsController;
    readonly tokens: TokensController;
    readonly utils: UtilsController;
    readonly contracts: ContractsController;
    readonly transactions: TransactionsController;
    readonly events: EventsController;
    readonly graphApiClient: Client;
    constructor({ graphApiKey, additionalHeaders, defaultChain, }?: ApiArguments);
    private createUrqlClient;
}

type NftTrait = {
    trait_type: string;
    value: string;
};
type RpcNftAsset = {
    collectionName: string;
    collectionTokenId: string;
    collectionAddress: string;
    name: string;
    description: string;
    imageUrl: string;
    traits: NftTrait[];
    chain: string;
    network: string;
};
type RPCTokenMetadata = {
    name: string | null;
    symbol: string | null;
    contractAddress: string;
    decimals: string | null;
    genesisBlock: string | null;
    genesisTransaction: string | null;
};

declare const qnFetchNFTInputSchema: z.ZodObject<{
    wallet: z.ZodString;
    contracts: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    omitFields: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    perPage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    page: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strict", z.ZodTypeAny, {
    wallet: string;
    contracts?: string[] | null | undefined;
    omitFields?: string[] | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    wallet: string;
    contracts?: string[] | null | undefined;
    omitFields?: string[] | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>;
type QNFetchNFTInput = z.infer<typeof qnFetchNFTInputSchema>;
type QNFetchNFTResult = {
    owner: string;
    assets: RpcNftAsset[];
    totalPages: number;
    totalItems: number;
    pageNumber: number;
};

declare const qnFetchNFTCollectionDetailsInputSchema: z.ZodObject<{
    contracts: z.ZodArray<z.ZodString, "many">;
}, "strict", z.ZodTypeAny, {
    contracts: string[];
}, {
    contracts: string[];
}>;
type QNFetchNFTCollectionDetailsInput = z.infer<typeof qnFetchNFTCollectionDetailsInputSchema>;
type RPCNftCollectionDetails = {
    name: string;
    address: string;
    description: string;
    erc1155: boolean;
    erc721: boolean;
    totalSupply: number;
    circulatingSupply: number;
    genesisBlock: number | null;
    genesisTransaction: string | null;
};
type QNFetchNFTCollectionDetailsResult = RPCNftCollectionDetails[];

declare const qnFetchNFTsByCollectionInputSchema: z.ZodObject<{
    collection: z.ZodString;
    omitFields: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    tokens: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    perPage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    page: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strict", z.ZodTypeAny, {
    collection: string;
    omitFields?: string[] | null | undefined;
    tokens?: string[] | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    collection: string;
    omitFields?: string[] | null | undefined;
    tokens?: string[] | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>;
type QNFetchNFTsByCollectionInput = z.infer<typeof qnFetchNFTsByCollectionInputSchema>;
type QNFetchNFTsByCollectionResult = {
    collection: string;
    tokens: RpcNftAsset[];
};

declare const qnGetTransfersByNFTInputSchema: z.ZodObject<{
    collection: z.ZodString;
    collectionTokenId: z.ZodString;
    perPage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    page: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strict", z.ZodTypeAny, {
    collection: string;
    collectionTokenId: string;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    collection: string;
    collectionTokenId: string;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>;
type QNGetTransfersByNFTInput = z.infer<typeof qnGetTransfersByNFTInputSchema>;
type TransfersByNFTTransfer = {
    blockNumber: number;
    date: string;
    from: string;
    to: string;
    txHash: string;
};
type QNGetTransfersByNFTResult = {
    collection: string;
    transfers: TransfersByNFTTransfer[];
    totalPages: number;
    pageNumber: number;
    totalItems: number;
};

declare const qnVerifyNFTsOwnerInputSchema: z.ZodObject<{
    wallet: z.ZodString;
    contracts: z.ZodArray<z.ZodString, "many">;
}, "strict", z.ZodTypeAny, {
    wallet: string;
    contracts: string[];
}, {
    wallet: string;
    contracts: string[];
}>;
type QNVerifyNFTsOwnerInput = z.infer<typeof qnVerifyNFTsOwnerInputSchema>;
type QNVerifyNFTsOwnerResult = {
    owner: string;
    assets: string[];
};

declare const qnGetTokenMetadataByCAInputSchema: z.ZodObject<{
    contract: z.ZodString;
}, "strict", z.ZodTypeAny, {
    contract: string;
}, {
    contract: string;
}>;
type QNGetTokenMetadataByCAInput = z.infer<typeof qnGetTokenMetadataByCAInputSchema>;
type QNGetTokenMetadataByCAResult = RPCTokenMetadata;

declare const qnGetTokenMetadataBySymbolInputSchema: z.ZodObject<{
    symbol: z.ZodString;
    perPage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    page: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strict", z.ZodTypeAny, {
    symbol: string;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    symbol: string;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>;
type QNGetTokenMetadataBySymbolInput = z.infer<typeof qnGetTokenMetadataBySymbolInputSchema>;
type QNGetTokenMetadataBySymbolResult = {
    tokens: RPCTokenMetadata[];
};

declare const qnGetTransactionsByAddressInputSchema: z.ZodEffects<z.ZodObject<{
    address: z.ZodString;
    fromBlock: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    toBlock: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    perPage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    page: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strict", z.ZodTypeAny, {
    address: string;
    fromBlock?: number | null | undefined;
    toBlock?: number | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    address: string;
    fromBlock?: number | null | undefined;
    toBlock?: number | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>, {
    address: string;
    fromBlock?: number | null | undefined;
    toBlock?: number | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    address: string;
    fromBlock?: number | null | undefined;
    toBlock?: number | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>;
type QNGetTransactionsByAddressInput = z.infer<typeof qnGetTransactionsByAddressInputSchema>;
interface RPCTransactionByAddress {
    blockTimestamp: string;
    transactionHash: string;
    blockNumber: string;
    transactionIndex: number;
    fromAddress: string;
    toAddress: string;
    contractAddress: string | null;
    value: string;
}
type QNGetTransactionsByAddressResult = {
    paginatedItems: RPCTransactionByAddress[];
    totalItems: number;
    totalPages: number;
    pageNumber: number;
};

declare const qnGetWalletTokenBalanceInputSchema: z.ZodObject<{
    wallet: z.ZodString;
    contracts: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
    perPage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    page: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strict", z.ZodTypeAny, {
    wallet: string;
    contracts?: string[] | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    wallet: string;
    contracts?: string[] | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>;
type QNGetWalletTokenBalanceInput = z.infer<typeof qnGetWalletTokenBalanceInputSchema>;
type RPCWalletTokenBalance = {
    quantityIn: string;
    quantityOut: string;
    name: string | null;
    symbol: string | null;
    decimals: string | null;
    address: string;
    totalBalance: string;
};
type QNGetWalletTokenBalanceResult = {
    result: RPCWalletTokenBalance[];
    totalItems: number;
    totalPages: number;
    pageNumber: number;
};

declare const qnGetWalletTokenTransactionsInputSchema: z.ZodObject<{
    address: z.ZodString;
    contract: z.ZodString;
    fromBlock: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    toBlock: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    perPage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    page: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strict", z.ZodTypeAny, {
    address: string;
    contract: string;
    fromBlock?: number | null | undefined;
    toBlock?: number | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}, {
    address: string;
    contract: string;
    fromBlock?: number | null | undefined;
    toBlock?: number | null | undefined;
    perPage?: number | null | undefined;
    page?: number | null | undefined;
}>;
type QNGetWalletTokenTransactionsInput = z.infer<typeof qnGetWalletTokenTransactionsInputSchema>;
type RPCFullTokenMetadata = {
    address: string;
    genesisBlock: string | null;
    genesisTransaction: string | null;
    name: string | null;
    symbol: string | null;
    decimals: string | null;
    contractAddress: string;
};
type RPCTokenTransaction = {
    name: string | null;
    symbol: string | null;
    decimals: string | null;
    address: string;
    quantityIn: string;
    quantityOut: string;
    blockNumber: string;
    transactionHash: string;
    timestamp: string;
    totalBalance: string;
};
type QNGetWalletTokenTransactionsResult = {
    paginatedItems: RPCTokenTransaction[];
    totalItems: number;
    totalPages: number;
    pageNumber: number;
    token: RPCFullTokenMetadata;
};

type NFTAndTokenActions = {
    /**
     * Returns aggregated data on NFTs for a given wallet.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_fetchNFTs_v2
     *
     * @param args - {@link QNFetchNFTInput}
     * @returns response - {@link QNFetchNFTsResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_fetchNFTs({
     *   wallet: "0xD10E24685c7CDD3cd3BaAA86b09C92Be28c834B6",
     *   contracts: ['0x2106C00Ac7dA0A3430aE667879139E832307AeAa'],
     * });
     */
    qn_fetchNFTs: (args: SimplifyType<QNFetchNFTInput>) => Promise<SimplifyType<QNFetchNFTResult>>;
    /**
     * Returns aggregated data on NFTs for a given wallet.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_fetchNFTCollectionDetails_v2
     *
     * @param args - {@link QNFetchNFTCollectionDetailsInput}
     * @returns response - {@link QNFetchNFTCollectionDetailsResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_fetchNFTCollectionDetails({
     *   contracts: [
     *     "0x60E4d786628Fea6478F785A6d7e704777c86a7c6",
     *     "0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7",
     *   ]
     * });
     */
    qn_fetchNFTCollectionDetails: (args: SimplifyType<QNFetchNFTCollectionDetailsInput>) => Promise<SimplifyType<QNFetchNFTCollectionDetailsResult>>;
    /**
     * Returns aggregated data on NFTs within a given collection.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_fetchNFTsByCollection_v2
     *
     * @param args - {@link QNFetchNFTsByCollectionInput}
     * @returns response - {@link QNFetchNFTsByCollectionResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_fetchNFTsByCollection({
     *   collection: "0x60E4d786628Fea6478F785A6d7e704777c86a7c6",
     * })
     */
    qn_fetchNFTsByCollection: (args: SimplifyType<QNFetchNFTsByCollectionInput>) => Promise<SimplifyType<QNFetchNFTsByCollectionResult>>;
    /**
    * Returns transfers by given NFT.
    *
    * - Docs: https://www.quicknode.com/docs/ethereum/qn_getTransfersByNFT_v2
    *
    * @param args - {@link QNGetTransfersByNFTInput}
    * @returns response - {@link QNGetTransfersByNFTResult}
    *
    * @example
    * import QuickNode from '@quicknode/sdk';
    *
    * const core = new QuickNode.Core({
    *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
    *   config: {
    *     addOns: { nftTokenV2: true }
    *   }
    * }
    *
    * const response = await core.client.qn_getTransfersByNFT({
    *   collection: "0x60E4d786628Fea6478F785A6d7e704777c86a7c6",
  7 *   collectionTokenId: "1",
    * })
    */
    qn_getTransfersByNFT: (args: SimplifyType<QNGetTransfersByNFTInput>) => Promise<SimplifyType<QNGetTransfersByNFTResult>>;
    /**
     * Confirms ownership of specified NFTs for a given wallet.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_verifyNFTsOwner_v2
     *
     * @param args - {@link QNVerifyNFTsOwnerInput}
     * @returns response - {@link QNVerifyNFTsOwnerResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_verifyNFTsOwner({
     *  wallet: "0x91b51c173a4bdaa1a60e234fc3f705a16d228740",
     *  contracts: [
     *    "0x2106c00ac7da0a3430ae667879139e832307aeaa:3643",
     *    "0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803",
     *   ],
     * })
     *
     */
    qn_verifyNFTsOwner: (args: SimplifyType<QNVerifyNFTsOwnerInput>) => Promise<SimplifyType<QNVerifyNFTsOwnerResult>>;
    /**
     * Returns token details for specified contract.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataByContractAddress_v2
     *
     * @param args - {@link QNGetTokenMetadataByCAInput}
     * @returns response - {@link QNGetTokenMetadataByCAResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_getTokenMetadataByContractAddress({
     *   contract: "0x2106c00ac7da0a3430ae667879139e832307aeaa",
     * })
     */
    qn_getTokenMetadataByContractAddress: (args: SimplifyType<QNGetTokenMetadataByCAInput>) => Promise<SimplifyType<QNGetTokenMetadataByCAResult | null>>;
    /**
     * Returns token details for specified token symbol.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataBySymbol_v2
     *
     * @param args - {@link QNGetTokenMetadataBySymbolInput}
     * @returns response - {@link QNGetTokenMetadataBySymbolResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_getTokenMetadataBySymbol({
     *   symbol: "DAI",
     * })
     */
    qn_getTokenMetadataBySymbol: (args: SimplifyType<QNGetTokenMetadataBySymbolInput>) => Promise<SimplifyType<QNGetTokenMetadataBySymbolResult>>;
    /**
     * Returns transactions within a specified wallet address.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_getTransactionsByAddress_v2
     *
     * @param args - {@link QNGetTransactionsByAddressInput}
     * @returns response - {@link QNGetTransactionsByAddressResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_getTransactionsByAddress({
     *   address: "0xD10E24685c7CDD3cd3BaAA86b09C92Be28c834B6"
     * })
     */
    qn_getTransactionsByAddress: (args: SimplifyType<QNGetTransactionsByAddressInput>) => Promise<SimplifyType<QNGetTransactionsByAddressResult>>;
    /**
     * Returns ERC-20 tokens and token balances within a wallet.
     *
     * - Docs: https://www.quicknode.com/docs/ethereum/qn_getWalletTokenBalance_v2
     *
     * @param args - {@link QNGetWalletTokenBalanceInput}
     * @returns response - {@link QNGetWalletTokenBalanceResult}
     *
     * @example
     * import QuickNode from '@quicknode/sdk';
     *
     * const core = new QuickNode.Core({
     *   endpointUrl: "https://some-cool-name.quiknode.pro/abcd1234",
     *   config: {
     *     addOns: { nftTokenV2: true }
     *   }
     * }
     *
     * const response = await core.client.qn_getWalletTokenBalance({
     *  address: "0xD10E24685c7CDD3cd3BaAA86b09C92Be28c834B6"
     * })
     */
    qn_getWalletTokenBalance: (args: SimplifyType<QNGetWalletTokenBalanceInput>) => Promise<SimplifyType<QNGetWalletTokenBalanceResult>>;
    qn_getWalletTokenTransactions: (args: SimplifyType<QNGetWalletTokenTransactionsInput>) => Promise<SimplifyType<QNGetWalletTokenTransactionsResult>>;
};

interface CoreArguments {
    endpointUrl: string;
    chain?: Chain;
    config?: QNCoreClientConfig;
}
type QNCoreClientConfig = {
    addOns?: {
        nftTokenV2: boolean;
    };
};
type QNCoreClient = PublicClient & NFTAndTokenActions;

declare class Core {
    readonly endpointUrl: string;
    readonly client: QNCoreClient;
    constructor({ endpointUrl, chain, config }: CoreArguments);
}

declare const QuickNode: {
    API: typeof API;
    Core: typeof Core;
};

type WalletNFTsByEnsQueryVariables = CodegenEthMainnetWalletNFTsByEnsQueryVariables;
type WalletNFTsByEnsInput = WalletNFTsByEnsQueryVariables & NonQueryInput;
type WalletNFTsByEnsResult = SimplifyType<{
    address: string;
    ensName: string;
    results: CodegenWalletNFTNodeFragment['nft'][];
    pageInfo: CodegenPaginationFragment;
}>;

type TransactionsByWalletENSQueryVariables = CodegenEthMainnetTransactionsByWalletENSQueryVariables;
type TransactionsByWalletENSInput = TransactionsByWalletENSQueryVariables & NonQueryInput;
type TransactionsByWalletENSResult = SimplifyType<{
    address: string;
    ensName: string;
    results: CodegenTransactionsNodeFragment[];
    pageInfo: CodegenPaginationFragment;
}>;

declare class QNInputValidationError extends Error {
    messages: string[];
    zodError: ZodError;
    issues: ZodError['issues'];
    constructor({ messages, zodError, }: {
        messages: string[];
        zodError: ZodError;
    });
}

declare class QNInvalidEndpointUrl extends Error {
    constructor();
}

declare class QNChainNotSupported extends Error {
    constructor(endpointUrl: string);
}

export { API, AllEventsInput, AllEventsResult, BalancesByWalletAddressInput, BalancesByWalletAddressResult, BalancesByWalletENSInput, BalancesByWalletENSResult, CollectionEventsInput, CollectionEventsResult, ContractDetailsInput, ContractDetailsResult, ContractEventsInput, ContractEventsResult, Core, CoreArguments, GasPricesInput, GasPricesResult, NFTDetailsInput, NFTDetailsResult, NFTEventsInput, NFTEventsResult, NFTTrendingCollectionResult, NFTTrendingCollectionsInput, NFTsByContractAddressInput, NFTsByContractAddressResult, NftCollectionDetailsInput, NftCollectionDetailsResult, QNChainNotSupported, QNCoreClient, QNCoreClientConfig, QNFetchNFTCollectionDetailsInput, QNFetchNFTCollectionDetailsResult, QNFetchNFTInput, QNFetchNFTResult, QNFetchNFTsByCollectionInput, QNFetchNFTsByCollectionResult, QNGetTokenMetadataByCAInput, QNGetTokenMetadataByCAResult, QNGetTokenMetadataBySymbolInput, QNGetTokenMetadataBySymbolResult, QNGetTransactionsByAddressInput, QNGetTransactionsByAddressResult, QNGetTransfersByNFTInput, QNGetTransfersByNFTResult, QNGetWalletTokenBalanceInput, QNGetWalletTokenBalanceResult, QNGetWalletTokenTransactionsInput, QNGetWalletTokenTransactionsResult, QNInputValidationError, QNInvalidEndpointUrl, QNVerifyNFTsOwnerInput, QNVerifyNFTsOwnerResult, TransactionsByHashInput, TransactionsByHashResult, TransactionsBySearchInput, TransactionsBySearchResult, TransactionsByWalletAddressInput, TransactionsByWalletAddressResult, TransactionsByWalletENSInput, TransactionsByWalletENSResult, WalletNFTsByAddressInput, WalletNFTsByAddressResult, WalletNFTsByEnsInput, WalletNFTsByEnsResult, QuickNode as default };
