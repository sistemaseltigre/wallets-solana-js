{"version":3,"file":"urql-exchange-graphcache.mjs","sources":["../src/helpers/help.ts","../src/ast/node.ts","../src/ast/variables.ts","../src/ast/traversal.ts","../src/ast/schemaPredicates.ts","../src/store/keys.ts","../src/store/data.ts","../src/operations/shared.ts","../src/operations/query.ts","../src/operations/write.ts","../src/store/store.ts","../src/ast/schema.ts","../src/operations/invalidate.ts","../src/helpers/operation.ts","../src/cacheExchange.ts","../src/offlineExchange.ts"],"sourcesContent":["// These are guards that are used throughout the codebase to warn or error on\n// unexpected behaviour or conditions.\n// Every warning and error comes with a number that uniquely identifies them.\n// You can read more about the messages themselves in `docs/graphcache/errors.md`\n\nimport type {\n  ExecutableDefinitionNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\n\nexport type ErrorCode =\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25\n  | 26\n  | 27\n  | 28;\n\ntype DebugNode = ExecutableDefinitionNode | InlineFragmentNode;\n\n// URL unfurls to https://formidable.com/open-source/urql/docs/graphcache/errors/\nconst helpUrl = '\\nhttps://bit.ly/2XbVrpR#';\nconst cache = new Set<string>();\n\nexport const currentDebugStack: string[] = [];\n\nexport const popDebugNode = () => currentDebugStack.pop();\n\nexport const pushDebugNode = (typename: void | string, node: DebugNode) => {\n  let identifier = '';\n  if (node.kind === Kind.INLINE_FRAGMENT) {\n    identifier = typename\n      ? `Inline Fragment on \"${typename}\"`\n      : 'Inline Fragment';\n  } else if (node.kind === Kind.OPERATION_DEFINITION) {\n    const name = node.name ? `\"${node.name.value}\"` : 'Unnamed';\n    identifier = `${name} ${node.operation}`;\n  } else if (node.kind === Kind.FRAGMENT_DEFINITION) {\n    identifier = `\"${node.name.value}\" Fragment`;\n  }\n\n  if (identifier) {\n    currentDebugStack.push(identifier);\n  }\n};\n\nconst getDebugOutput = (): string =>\n  currentDebugStack.length\n    ? '\\n(Caused At: ' + currentDebugStack.join(', ') + ')'\n    : '';\n\nexport function invariant(\n  condition: any,\n  message: string,\n  code: ErrorCode\n): asserts condition {\n  if (!condition) {\n    let errorMessage = message || 'Minfied Error #' + code + '\\n';\n    if (process.env.NODE_ENV !== 'production') {\n      errorMessage += getDebugOutput();\n    }\n\n    const error = new Error(errorMessage + helpUrl + code);\n    error.name = 'Graphcache Error';\n    throw error;\n  }\n}\n\nexport function warn(message: string, code: ErrorCode) {\n  if (!cache.has(message)) {\n    console.warn(message + getDebugOutput() + helpUrl + code);\n    cache.add(message);\n  }\n}\n","import type {\n  NamedTypeNode,\n  NameNode,\n  DirectiveNode,\n  SelectionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\n\nexport type SelectionSet = readonly FormattedNode<SelectionNode>[];\n\nconst EMPTY_DIRECTIVES: Record<string, DirectiveNode | undefined> = {};\n\n/** Returns the directives dictionary of a given node */\nexport const getDirectives = (node: {\n  _directives?: Record<string, DirectiveNode | undefined>;\n}) => node._directives || EMPTY_DIRECTIVES;\n\n/** Returns the name of a given node */\nexport const getName = (node: { name: NameNode }): string => node.name.value;\n\nexport const getFragmentTypeName = (node: FragmentDefinitionNode): string =>\n  node.typeCondition.name.value;\n\n/** Returns either the field's name or the field's alias */\nexport const getFieldAlias = (node: FieldNode): string =>\n  node.alias ? node.alias.value : node.name.value;\n\nconst emptySelectionSet: SelectionSet = [];\n\n/** Returns the SelectionSet for a given inline or defined fragment node */\nexport const getSelectionSet = (node: {\n  selectionSet?: FormattedNode<SelectionSetNode>;\n}): FormattedNode<SelectionSet> =>\n  (node.selectionSet\n    ? node.selectionSet.selections\n    : emptySelectionSet) as FormattedNode<SelectionSet>;\n\nexport const getTypeCondition = (node: {\n  typeCondition?: NamedTypeNode;\n}): string | null =>\n  node.typeCondition ? node.typeCondition.name.value : null;\n","import type {\n  FieldNode,\n  DirectiveNode,\n  OperationDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped } from '@0no-co/graphql.web';\n\nimport { getName } from './node';\n\nimport type { Variables } from '../types';\n\n/** Evaluates a fields arguments taking vars into account */\nexport const getFieldArguments = (\n  node: FieldNode | DirectiveNode,\n  vars: Variables\n): null | Variables => {\n  let args: null | Variables = null;\n  if (node.arguments) {\n    for (let i = 0, l = node.arguments.length; i < l; i++) {\n      const arg = node.arguments[i];\n      const value = valueFromASTUntyped(arg.value, vars);\n      if (value !== undefined && value !== null) {\n        if (!args) args = {};\n        args[getName(arg)] = value as any;\n      }\n    }\n  }\n  return args;\n};\n\n/** Returns a filtered form of variables with values missing that the query doesn't require */\nexport const filterVariables = (\n  node: OperationDefinitionNode,\n  input: void | object\n) => {\n  if (!input || !node.variableDefinitions) {\n    return undefined;\n  }\n\n  const vars = {};\n  for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n    const name = getName(node.variableDefinitions[i].variable);\n    vars[name] = input[name];\n  }\n\n  return vars;\n};\n\n/** Returns a normalized form of variables with defaulted values */\nexport const normalizeVariables = (\n  node: OperationDefinitionNode,\n  input: void | Record<string, unknown>\n): Variables => {\n  const vars = {};\n  if (!input) return vars;\n\n  if (node.variableDefinitions) {\n    for (let i = 0, l = node.variableDefinitions.length; i < l; i++) {\n      const def = node.variableDefinitions[i];\n      const name = getName(def.variable);\n      vars[name] =\n        input[name] === undefined && def.defaultValue\n          ? valueFromASTUntyped(def.defaultValue, input)\n          : input[name];\n    }\n  }\n\n  for (const key in input) {\n    if (!(key in vars)) vars[key] = input[key];\n  }\n\n  return vars;\n};\n","import type {\n  SelectionNode,\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentSpreadNode,\n  InlineFragmentNode,\n} from '@0no-co/graphql.web';\nimport { valueFromASTUntyped, Kind } from '@0no-co/graphql.web';\n\nimport type { FormattedNode } from '@urql/core';\nimport { getName, getDirectives } from './node';\nimport { invariant } from '../helpers/help';\nimport type { Fragments, Variables } from '../types';\n\nfunction getMainOperation(\n  doc: FormattedNode<DocumentNode>\n): FormattedNode<OperationDefinitionNode>;\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode;\n\n/** Returns the main operation's definition */\nfunction getMainOperation(doc: DocumentNode): OperationDefinitionNode {\n  for (let i = 0; i < doc.definitions.length; i++) {\n    if (doc.definitions[i].kind === Kind.OPERATION_DEFINITION) {\n      return doc.definitions[i] as FormattedNode<OperationDefinitionNode>;\n    }\n  }\n\n  invariant(\n    false,\n    'Invalid GraphQL document: All GraphQL documents must contain an OperationDefinition' +\n      'node for a query, subscription, or mutation.',\n    1\n  );\n}\n\nexport { getMainOperation };\n\n/** Returns a mapping from fragment names to their selections */\nexport const getFragments = (doc: FormattedNode<DocumentNode>): Fragments => {\n  const fragments: Fragments = {};\n  for (let i = 0; i < doc.definitions.length; i++) {\n    const node = doc.definitions[i];\n    if (node.kind === Kind.FRAGMENT_DEFINITION) {\n      fragments[getName(node)] = node;\n    }\n  }\n\n  return fragments;\n};\n\n/** Resolves @include and @skip directives to determine whether field is included. */\nexport const shouldInclude = (\n  node: FormattedNode<SelectionNode>,\n  vars: Variables\n): boolean => {\n  const directives = getDirectives(node);\n  if (directives.include || directives.skip) {\n    // Finds any @include or @skip directive that forces the node to be skipped\n    for (const name in directives) {\n      const directive = directives[name];\n      if (\n        directive &&\n        (name === 'include' || name === 'skip') &&\n        directive.arguments &&\n        directive.arguments[0] &&\n        getName(directive.arguments[0]) === 'if'\n      ) {\n        // Return whether this directive forces us to skip\n        // `@include(if: false)` or `@skip(if: true)`\n        const value = valueFromASTUntyped(directive.arguments[0].value, vars);\n        return name === 'include' ? !!value : !value;\n      }\n    }\n  }\n  return true;\n};\n\n/** Resolves @defer directive to determine whether a fragment is potentially skipped. */\nexport const isDeferred = (\n  node: FormattedNode<FragmentSpreadNode | InlineFragmentNode>,\n  vars: Variables\n): boolean => {\n  const { defer } = getDirectives(node);\n  if (defer) {\n    for (const argument of defer.arguments || []) {\n      if (getName(argument) === 'if') {\n        // Return whether `@defer(if: )` is enabled\n        return !!valueFromASTUntyped(argument.value, vars);\n      }\n    }\n    return true;\n  }\n\n  return false;\n};\n","import type {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport { warn, invariant } from '../helpers/help';\nimport { getTypeCondition } from './node';\nimport type { SchemaIntrospector, SchemaObject } from './schema';\n\nimport type {\n  KeyingConfig,\n  UpdatesConfig,\n  ResolverConfig,\n  OptimisticMutationConfig,\n} from '../types';\n\nconst BUILTIN_NAME = '__';\n\nexport const isFieldNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string\n): boolean => {\n  const field = getField(schema, typename, fieldName);\n  return !!field && field.type.kind !== 'NON_NULL';\n};\n\nexport const isListNullable = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string\n): boolean => {\n  const field = getField(schema, typename, fieldName);\n  if (!field) return false;\n  const ofType =\n    field.type.kind === 'NON_NULL' ? field.type.ofType : field.type;\n  return ofType.kind === 'LIST' && ofType.ofType.kind !== 'NON_NULL';\n};\n\nexport const isFieldAvailableOnType = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string\n): boolean =>\n  fieldName.indexOf(BUILTIN_NAME) === 0 ||\n  typename.indexOf(BUILTIN_NAME) === 0 ||\n  !!getField(schema, typename, fieldName);\n\nexport const isInterfaceOfType = (\n  schema: SchemaIntrospector,\n  node: InlineFragmentNode | FragmentDefinitionNode,\n  typename: string | void\n): boolean => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) {\n    return true;\n  } else if (\n    schema.types!.has(typeCondition) &&\n    schema.types!.get(typeCondition)!.kind === 'OBJECT'\n  ) {\n    return typeCondition === typename;\n  }\n\n  expectAbstractType(schema, typeCondition!);\n  expectObjectType(schema, typename!);\n  return schema.isSubType(typeCondition, typename);\n};\n\nconst getField = (\n  schema: SchemaIntrospector,\n  typename: string,\n  fieldName: string\n) => {\n  if (\n    fieldName.indexOf(BUILTIN_NAME) === 0 ||\n    typename.indexOf(BUILTIN_NAME) === 0\n  )\n    return;\n\n  expectObjectType(schema, typename);\n  const object = schema.types!.get(typename) as SchemaObject;\n  const field = object.fields()[fieldName];\n  if (!field) {\n    warn(\n      'Invalid field: The field `' +\n        fieldName +\n        '` does not exist on `' +\n        typename +\n        '`, ' +\n        'but the GraphQL document expects it to exist.\\n' +\n        'Traversal will continue, however this may lead to undefined behavior!',\n      4\n    );\n  }\n\n  return field;\n};\n\nfunction expectObjectType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      schema.types!.get(typename)!.kind === 'OBJECT',\n    'Invalid Object type: The type `' +\n      typename +\n      '` is not an object in the defined schema, ' +\n      'but the GraphQL document is traversing it.',\n    3\n  );\n}\n\nfunction expectAbstractType(schema: SchemaIntrospector, typename: string) {\n  invariant(\n    schema.types!.has(typename) &&\n      (schema.types!.get(typename)!.kind === 'INTERFACE' ||\n        schema.types!.get(typename)!.kind === 'UNION'),\n    'Invalid Abstract type: The type `' +\n      typename +\n      '` is not an Interface or Union type in the defined schema, ' +\n      'but a fragment in the GraphQL document is using it as a type condition.',\n    5\n  );\n}\n\nexport function expectValidKeyingConfig(\n  schema: SchemaIntrospector,\n  keys: KeyingConfig\n): void {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const key in keys) {\n      if (!schema.types!.has(key)) {\n        warn(\n          'Invalid Object type: The type `' +\n            key +\n            '` is not an object in the defined schema, but the `keys` option is referencing it.',\n          20\n        );\n      }\n    }\n  }\n}\n\nexport function expectValidUpdatesConfig(\n  schema: SchemaIntrospector,\n  updates: UpdatesConfig\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const typename in updates) {\n    if (!updates[typename]) {\n      continue;\n    } else if (!schema.types!.has(typename)) {\n      let addition = '';\n\n      if (\n        typename === 'Mutation' &&\n        schema.mutation &&\n        schema.mutation !== 'Mutation'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.mutation + '`?';\n      } else if (\n        typename === 'Subscription' &&\n        schema.subscription &&\n        schema.subscription !== 'Subscription'\n      ) {\n        addition +=\n          '\\nMaybe your config should reference `' + schema.subscription + '`?';\n      }\n\n      return warn(\n        'Invalid updates type: The type `' +\n          typename +\n          '` is not an object in the defined schema, but the `updates` config is referencing it.' +\n          addition,\n        21\n      );\n    }\n\n    const fields = (schema.types!.get(typename)! as SchemaObject).fields();\n    for (const fieldName in updates[typename]!) {\n      if (!fields[fieldName]) {\n        warn(\n          'Invalid updates field: `' +\n            fieldName +\n            '` on `' +\n            typename +\n            '` is not in the defined schema, but the `updates` config is referencing it.',\n          22\n        );\n      }\n    }\n  }\n}\n\nfunction warnAboutResolver(name: string): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`,\n    23\n  );\n}\n\nfunction warnAboutAbstractResolver(\n  name: string,\n  kind: 'UNION' | 'INTERFACE'\n): void {\n  warn(\n    `Invalid resolver: \\`${name}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\n      kind === 'UNION' ? 'make up the union' : 'implement the interface'\n    } instead.`,\n    26\n  );\n}\n\nexport function expectValidResolversConfig(\n  schema: SchemaIntrospector,\n  resolvers: ResolverConfig\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  for (const key in resolvers) {\n    if (key === 'Query') {\n      if (schema.query) {\n        const validQueries = (\n          schema.types!.get(schema.query) as SchemaObject\n        ).fields();\n        for (const resolverQuery in resolvers.Query || {}) {\n          if (!validQueries[resolverQuery]) {\n            warnAboutResolver('Query.' + resolverQuery);\n          }\n        }\n      } else {\n        warnAboutResolver('Query');\n      }\n    } else {\n      if (!schema.types!.has(key)) {\n        warnAboutResolver(key);\n      } else if (\n        schema.types!.get(key)!.kind === 'INTERFACE' ||\n        schema.types!.get(key)!.kind === 'UNION'\n      ) {\n        warnAboutAbstractResolver(\n          key,\n          schema.types!.get(key)!.kind as 'INTERFACE' | 'UNION'\n        );\n      } else {\n        const validTypeProperties = (\n          schema.types!.get(key) as SchemaObject\n        ).fields();\n        for (const resolverProperty in resolvers[key] || {}) {\n          if (!validTypeProperties[resolverProperty]) {\n            warnAboutResolver(key + '.' + resolverProperty);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport function expectValidOptimisticMutationsConfig(\n  schema: SchemaIntrospector,\n  optimisticMutations: OptimisticMutationConfig\n): void {\n  if (process.env.NODE_ENV === 'production') {\n    return;\n  }\n\n  if (schema.mutation) {\n    const validMutations = (\n      schema.types!.get(schema.mutation) as SchemaObject\n    ).fields();\n    for (const mutation in optimisticMutations) {\n      if (!validMutations[mutation]) {\n        warn(\n          `Invalid optimistic mutation field: \\`${mutation}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`,\n          24\n        );\n      }\n    }\n  }\n}\n","import { stringifyVariables } from '@urql/core';\nimport type { FieldArgs, FieldInfo, KeyInfo } from '../types';\n\nexport const keyOfField = (fieldName: string, args?: FieldArgs) =>\n  args ? `${fieldName}(${stringifyVariables(args)})` : fieldName;\n\nexport const joinKeys = (parentKey: string, key: string) =>\n  `${parentKey}.${key}`;\n\nexport const fieldInfoOfKey = (fieldKey: string): FieldInfo => {\n  const parenIndex = fieldKey.indexOf('(');\n  if (parenIndex > -1) {\n    return {\n      fieldKey,\n      fieldName: fieldKey.slice(0, parenIndex),\n      arguments: JSON.parse(fieldKey.slice(parenIndex + 1, -1)),\n    };\n  } else {\n    return {\n      fieldKey,\n      fieldName: fieldKey,\n      arguments: null,\n    };\n  }\n};\n\nexport const serializeKeys = (entityKey: string, fieldKey: string) =>\n  `${entityKey.replace(/\\./g, '%2e')}.${fieldKey}`;\n\nexport const deserializeKeyInfo = (key: string): KeyInfo => {\n  const dotIndex = key.indexOf('.');\n  const entityKey = key.slice(0, dotIndex).replace(/%2e/g, '.');\n  const fieldKey = key.slice(dotIndex + 1);\n  return { entityKey, fieldKey };\n};\n","import { stringifyVariables } from '@urql/core';\n\nimport type {\n  Link,\n  EntityField,\n  FieldInfo,\n  StorageAdapter,\n  SerializedEntries,\n  Dependencies,\n  OperationType,\n  DataField,\n  Data,\n} from '../types';\n\nimport {\n  serializeKeys,\n  deserializeKeyInfo,\n  fieldInfoOfKey,\n  joinKeys,\n} from './keys';\n\nimport { invariant, currentDebugStack } from '../helpers/help';\n\ntype Dict<T> = Record<string, T>;\ntype KeyMap<T> = Map<string, T>;\ntype OperationMap<T> = Map<number, T>;\n\ninterface NodeMap<T> {\n  optimistic: OperationMap<KeyMap<Dict<T | undefined>>>;\n  base: KeyMap<Dict<T>>;\n}\n\nexport interface InMemoryData {\n  /** Flag for whether the data is waiting for hydration */\n  hydrating: boolean;\n  /** Flag for whether deferred tasks have been scheduled yet */\n  defer: boolean;\n  /** A list of entities that have been flagged for gargabe collection since no references to them are left */\n  gc: Set<string>;\n  /** A list of entity+field keys that will be persisted */\n  persist: Set<string>;\n  /** The API's \"Query\" typename which is needed to filter dependencies */\n  queryRootKey: string;\n  /** Number of references to each entity (except \"Query\") */\n  refCount: KeyMap<number>;\n  /** A map of entity fields (key-value entries per entity) */\n  records: NodeMap<EntityField>;\n  /** A map of entity links which are connections from one entity to another (key-value entries per entity) */\n  links: NodeMap<Link>;\n  /** A set of Query operation keys that are in-flight and deferred/streamed */\n  deferredKeys: Set<number>;\n  /** A set of Query operation keys that are in-flight and awaiting a result */\n  commutativeKeys: Set<number>;\n  /** A set of Query operation keys that have been written to */\n  dirtyKeys: Set<number>;\n  /** The order of optimistic layers */\n  optimisticOrder: number[];\n  /** This may be a persistence adapter that will receive changes in a batch */\n  storage: StorageAdapter | null;\n}\n\nlet currentOwnership: null | WeakSet<any> = null;\nlet currentDataMapping: null | WeakMap<any, any> = null;\nlet currentData: null | InMemoryData = null;\nlet currentOptimisticKey: null | number = null;\nexport let currentOperation: null | OperationType = null;\nexport let currentDependencies: null | Dependencies = null;\nexport let currentForeignData = false;\nexport let currentOptimistic = false;\n\nexport function makeData(data: DataField | void, isArray?: false): Data;\nexport function makeData(data: DataField | void, isArray: true): DataField[];\n\n/** Creates a new data object unless it's been created in this data run */\nexport function makeData(data?: DataField | void, isArray?: boolean) {\n  let newData: Data | Data[] | undefined;\n  if (data) {\n    if (currentOwnership!.has(data)) return data;\n    newData = currentDataMapping!.get(data) as any;\n  }\n\n  if (newData == null) {\n    newData = (isArray ? [] : {}) as any;\n  }\n\n  if (data) {\n    currentDataMapping!.set(data, newData);\n  }\n\n  currentOwnership!.add(newData);\n  return newData;\n}\n\nexport const ownsData = (data?: Data): boolean =>\n  !!data && currentOwnership!.has(data);\n\n/** Before reading or writing the global state needs to be initialised */\nexport const initDataState = (\n  operationType: OperationType,\n  data: InMemoryData,\n  layerKey?: number | null,\n  isOptimistic?: boolean,\n  isForeignData?: boolean\n) => {\n  currentOwnership = new WeakSet();\n  currentDataMapping = new WeakMap();\n  currentOperation = operationType;\n  currentData = data;\n  currentDependencies = new Set();\n  currentOptimistic = !!isOptimistic;\n  currentForeignData = !!isForeignData;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (!layerKey) {\n    currentOptimisticKey = null;\n  } else if (currentOperation === 'read') {\n    // We don't create new layers for read operations and instead simply\n    // apply the currently available layer, if any\n    currentOptimisticKey = layerKey;\n  } else if (\n    isOptimistic ||\n    data.hydrating ||\n    data.optimisticOrder.length > 1\n  ) {\n    // If this operation isn't optimistic and we see it for the first time,\n    // then it must've been optimistic in the past, so we can proactively\n    // clear the optimistic data before writing\n    if (!isOptimistic && !data.commutativeKeys.has(layerKey)) {\n      reserveLayer(data, layerKey);\n    } else if (isOptimistic) {\n      if (\n        data.optimisticOrder.indexOf(layerKey) !== -1 &&\n        !data.commutativeKeys.has(layerKey)\n      ) {\n        data.optimisticOrder.splice(data.optimisticOrder.indexOf(layerKey), 1);\n      }\n      // NOTE: This optimally shouldn't happen as it implies that an optimistic\n      // write is being performed after a concrete write.\n      data.commutativeKeys.delete(layerKey);\n    }\n\n    // An optimistic update of a mutation may force an optimistic layer,\n    // or this Query update may be applied optimistically since it's part\n    // of a commutative chain\n    currentOptimisticKey = layerKey;\n    createLayer(data, layerKey);\n  } else {\n    // Otherwise we don't create an optimistic layer and clear the\n    // operation's one if it already exists\n    // We also do this when only one layer exists to avoid having to squash\n    // any layers at the end of writing this layer\n    currentOptimisticKey = null;\n    deleteLayer(data, layerKey);\n  }\n};\n\n/** Reset the data state after read/write is complete */\nexport const clearDataState = () => {\n  // NOTE: This is only called to check for the invariant to pass\n  if (process.env.NODE_ENV !== 'production') {\n    getCurrentDependencies();\n  }\n\n  const data = currentData!;\n  const layerKey = currentOptimisticKey;\n  currentOptimistic = false;\n  currentOptimisticKey = null;\n\n  // Determine whether the current operation has been a commutative layer\n  if (\n    !data.hydrating &&\n    layerKey &&\n    data.optimisticOrder.indexOf(layerKey) > -1\n  ) {\n    // Squash all layers in reverse order (low priority upwards) that have\n    // been written already\n    let i = data.optimisticOrder.length;\n    while (\n      --i >= 0 &&\n      data.dirtyKeys.has(data.optimisticOrder[i]) &&\n      data.commutativeKeys.has(data.optimisticOrder[i])\n    )\n      squashLayer(data.optimisticOrder[i]);\n  }\n\n  currentOwnership = null;\n  currentDataMapping = null;\n  currentOperation = null;\n  currentData = null;\n  currentDependencies = null;\n  if (process.env.NODE_ENV !== 'production') {\n    currentDebugStack.length = 0;\n  }\n\n  if (process.env.NODE_ENV !== 'test') {\n    // Schedule deferred tasks if we haven't already, and if either a persist or GC run\n    // are likely to be needed\n    if (!data.defer && (data.storage || !data.optimisticOrder.length)) {\n      data.defer = true;\n      setTimeout(() => {\n        initDataState('read', data, null);\n        gc();\n        persistData();\n        clearDataState();\n        data.defer = false;\n      });\n    }\n  }\n};\n\n/** Initialises then resets the data state, which may squash this layer if necessary */\nexport const noopDataState = (\n  data: InMemoryData,\n  layerKey: number | null,\n  isOptimistic?: boolean\n) => {\n  if (layerKey && !isOptimistic) data.deferredKeys.delete(layerKey);\n  initDataState('write', data, layerKey, isOptimistic);\n  clearDataState();\n};\n\n/** As we're writing, we keep around all the records and links we've read or have written to */\nexport const getCurrentDependencies = (): Dependencies => {\n  invariant(\n    currentDependencies !== null,\n    'Invalid Cache call: The cache may only be accessed or mutated during' +\n      'operations like write or query, or as part of its resolvers, updaters, ' +\n      'or optimistic configs.',\n    2\n  );\n\n  return currentDependencies;\n};\n\nexport const make = (queryRootKey: string): InMemoryData => ({\n  hydrating: false,\n  defer: false,\n  gc: new Set(),\n  persist: new Set(),\n  queryRootKey,\n  refCount: new Map(),\n  links: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  records: {\n    optimistic: new Map(),\n    base: new Map(),\n  },\n  deferredKeys: new Set(),\n  commutativeKeys: new Set(),\n  dirtyKeys: new Set(),\n  optimisticOrder: [],\n  storage: null,\n});\n\n/** Adds a node value to a NodeMap (taking optimistic values into account */\nconst setNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string,\n  value: T\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      currentOperation !== 'read',\n      'Invalid Cache write: You may not write to the cache during cache reads. ' +\n        ' Accesses to `cache.writeFragment`, `cache.updateQuery`, and `cache.link` may ' +\n        ' not be made inside `resolvers` for instance.',\n      27\n    );\n  }\n\n  // Optimistic values are written to a map in the optimistic dict\n  // All other values are written to the base map\n  const keymap: KeyMap<Dict<T | undefined>> = currentOptimisticKey\n    ? map.optimistic.get(currentOptimisticKey)!\n    : map.base;\n\n  // On the map itself we get or create the entity as a dict\n  let entity = keymap.get(entityKey) as Dict<T | undefined>;\n  if (entity === undefined) {\n    keymap.set(entityKey, (entity = Object.create(null)));\n  }\n\n  // If we're setting undefined we delete the node's entry\n  // On optimistic layers we actually set undefined so it can\n  // override the base value\n  if (value === undefined && !currentOptimisticKey) {\n    delete entity[fieldKey];\n  } else {\n    entity[fieldKey] = value;\n  }\n};\n\n/** Gets a node value from a NodeMap (taking optimistic values into account */\nconst getNode = <T>(\n  map: NodeMap<T>,\n  entityKey: string,\n  fieldKey: string\n): T | undefined => {\n  let node: Dict<T | undefined> | undefined;\n  // A read may be initialised to skip layers until its own, which is useful for\n  // reading back written data. It won't skip over optimistic layers however\n  let skip =\n    !currentOptimistic &&\n    currentOperation === 'read' &&\n    currentOptimisticKey &&\n    currentData!.commutativeKeys.has(currentOptimisticKey);\n  // This first iterates over optimistic layers (in order)\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const layerKey = currentData!.optimisticOrder[i];\n    const optimistic = map.optimistic.get(layerKey);\n    // If we're reading starting from a specific layer, we skip until a match\n    skip = skip && layerKey !== currentOptimisticKey;\n    // If the node and node value exists it is returned, including undefined\n    if (\n      optimistic &&\n      (!skip || !currentData!.commutativeKeys.has(layerKey)) &&\n      (!currentOptimistic ||\n        currentOperation === 'write' ||\n        currentData!.commutativeKeys.has(layerKey)) &&\n      (node = optimistic.get(entityKey)) !== undefined &&\n      fieldKey in node\n    ) {\n      return node[fieldKey];\n    }\n  }\n\n  // Otherwise we read the non-optimistic base value\n  node = map.base.get(entityKey);\n  return node !== undefined ? node[fieldKey] : undefined;\n};\n\n/** Adjusts the reference count of an entity on a refCount dict by \"by\" and updates the gc */\nconst updateRCForEntity = (entityKey: string, by: number): void => {\n  // Retrieve the reference count and adjust it by \"by\"\n  const count = currentData!.refCount.get(entityKey) || 0;\n  const newCount = count + by > 0 ? count + by : 0;\n  currentData!.refCount.set(entityKey, newCount);\n  // Add it to the garbage collection batch if it needs to be deleted or remove it\n  // from the batch if it needs to be kept\n  if (!newCount) currentData!.gc.add(entityKey);\n  else if (!count && newCount) currentData!.gc.delete(entityKey);\n};\n\n/** Adjusts the reference counts of all entities of a link on a refCount dict by \"by\" and updates the gc */\nconst updateRCForLink = (link: Link | undefined, by: number): void => {\n  if (Array.isArray(link)) {\n    for (let i = 0, l = link.length; i < l; i++) updateRCForLink(link[i], by);\n  } else if (typeof link === 'string') {\n    updateRCForEntity(link, by);\n  }\n};\n\n/** Writes all parsed FieldInfo objects of a given node dict to a given array if it hasn't been seen */\nconst extractNodeFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  node: Dict<T> | undefined\n): void => {\n  if (node !== undefined) {\n    for (const fieldKey in node) {\n      if (!seenFieldKeys.has(fieldKey)) {\n        // If the node hasn't been seen the serialized fieldKey is turnt back into\n        // a rich FieldInfo object that also contains the field's name and arguments\n        fieldInfos.push(fieldInfoOfKey(fieldKey));\n        seenFieldKeys.add(fieldKey);\n      }\n    }\n  }\n};\n\n/** Writes all parsed FieldInfo objects of all nodes in a NodeMap to a given array */\nconst extractNodeMapFields = <T>(\n  fieldInfos: FieldInfo[],\n  seenFieldKeys: Set<string>,\n  entityKey: string,\n  map: NodeMap<T>\n) => {\n  // Extracts FieldInfo for the entity in the base map\n  extractNodeFields(fieldInfos, seenFieldKeys, map.base.get(entityKey));\n\n  // Then extracts FieldInfo for the entity from the optimistic maps\n  for (let i = 0, l = currentData!.optimisticOrder.length; i < l; i++) {\n    const optimistic = map.optimistic.get(currentData!.optimisticOrder[i]);\n    if (optimistic !== undefined) {\n      extractNodeFields(fieldInfos, seenFieldKeys, optimistic.get(entityKey));\n    }\n  }\n};\n\n/** Garbage collects all entities that have been marked as having no references */\nexport const gc = () => {\n  // If we're currently awaiting deferred results, abort GC run\n  if (currentData!.optimisticOrder.length) return;\n\n  // Iterate over all entities that have been marked for deletion\n  // Entities have been marked for deletion in `updateRCForEntity` if\n  // their reference count dropped to 0\n  for (const entityKey of currentData!.gc.keys()) {\n    // Remove the current key from the GC batch\n    currentData!.gc.delete(entityKey);\n\n    // Check first whether the entity has any references,\n    // if so, we skip it from the GC run\n    const rc = currentData!.refCount.get(entityKey) || 0;\n    if (rc > 0) continue;\n\n    // Delete the reference count, and delete the entity from the GC batch\n    currentData!.refCount.delete(entityKey);\n    currentData!.records.base.delete(entityKey);\n    const linkNode = currentData!.links.base.get(entityKey);\n    if (linkNode) {\n      currentData!.links.base.delete(entityKey);\n      for (const fieldKey in linkNode) updateRCForLink(linkNode[fieldKey], -1);\n    }\n  }\n};\n\nconst updateDependencies = (entityKey: string, fieldKey?: string) => {\n  if (entityKey !== currentData!.queryRootKey) {\n    currentDependencies!.add(entityKey);\n  } else if (fieldKey !== undefined && fieldKey !== '__typename') {\n    currentDependencies!.add(joinKeys(entityKey, fieldKey));\n  }\n};\n\nconst updatePersist = (entityKey: string, fieldKey: string) => {\n  if (!currentOptimistic && currentData!.storage) {\n    currentData!.persist.add(serializeKeys(entityKey, fieldKey));\n  }\n};\n\n/** Reads an entity's field (a \"record\") from data */\nexport const readRecord = (\n  entityKey: string,\n  fieldKey: string\n): EntityField => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.records, entityKey, fieldKey);\n};\n\n/** Reads an entity's link from data */\nexport const readLink = (\n  entityKey: string,\n  fieldKey: string\n): Link | undefined => {\n  updateDependencies(entityKey, fieldKey);\n  return getNode(currentData!.links, entityKey, fieldKey);\n};\n\n/** Writes an entity's field (a \"record\") to data */\nexport const writeRecord = (\n  entityKey: string,\n  fieldKey: string,\n  value?: EntityField\n) => {\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  setNode(currentData!.records, entityKey, fieldKey, value);\n};\n\nexport const hasField = (entityKey: string, fieldKey: string): boolean =>\n  readRecord(entityKey, fieldKey) !== undefined ||\n  readLink(entityKey, fieldKey) !== undefined;\n\n/** Writes an entity's link to data */\nexport const writeLink = (\n  entityKey: string,\n  fieldKey: string,\n  link?: Link | undefined\n) => {\n  // Retrieve the link NodeMap from either an optimistic or the base layer\n  const links = currentOptimisticKey\n    ? currentData!.links.optimistic.get(currentOptimisticKey)\n    : currentData!.links.base;\n  // Update the reference count for the link\n  if (!currentOptimisticKey) {\n    const entityLinks = links && links.get(entityKey);\n    updateRCForLink(entityLinks && entityLinks[fieldKey], -1);\n    updateRCForLink(link, 1);\n  }\n  // Update persistence batch and dependencies\n  updateDependencies(entityKey, fieldKey);\n  updatePersist(entityKey, fieldKey);\n  // Update the link\n  setNode(currentData!.links, entityKey, fieldKey, link);\n};\n\n/** Reserves an optimistic layer and preorders it */\nexport const reserveLayer = (\n  data: InMemoryData,\n  layerKey: number,\n  hasNext?: boolean\n) => {\n  // Find the current index for the layer, and remove it from\n  // the order if it exists already\n  let index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) data.optimisticOrder.splice(index, 1);\n\n  if (hasNext) {\n    data.deferredKeys.add(layerKey);\n    // If the layer has future results then we'll move it past any layer that's\n    // still empty, so currently pending operations will take precedence over it\n    for (\n      index = index > -1 ? index : 0;\n      index < data.optimisticOrder.length &&\n      !data.deferredKeys.has(data.optimisticOrder[index]) &&\n      (!data.dirtyKeys.has(data.optimisticOrder[index]) ||\n        !data.commutativeKeys.has(data.optimisticOrder[index]));\n      index++\n    );\n  } else {\n    data.deferredKeys.delete(layerKey);\n    // Protect optimistic layers from being turned into non-optimistic layers\n    // while preserving optimistic data\n    if (index > -1 && !data.commutativeKeys.has(layerKey))\n      clearLayer(data, layerKey);\n    index = 0;\n  }\n\n  // Register the layer with the deferred or \"top\" index and\n  // mark it as commutative\n  data.optimisticOrder.splice(index, 0, layerKey);\n  data.commutativeKeys.add(layerKey);\n};\n\n/** Creates an optimistic layer of links and records */\nconst createLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.optimisticOrder.indexOf(layerKey) === -1) {\n    data.optimisticOrder.unshift(layerKey);\n  }\n\n  if (!data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.add(layerKey);\n    data.links.optimistic.set(layerKey, new Map());\n    data.records.optimistic.set(layerKey, new Map());\n  }\n};\n\n/** Clears all links and records of an optimistic layer */\nconst clearLayer = (data: InMemoryData, layerKey: number) => {\n  if (data.dirtyKeys.has(layerKey)) {\n    data.dirtyKeys.delete(layerKey);\n    data.records.optimistic.delete(layerKey);\n    data.links.optimistic.delete(layerKey);\n    data.deferredKeys.delete(layerKey);\n  }\n};\n\n/** Deletes links and records of an optimistic layer, and the layer itself */\nconst deleteLayer = (data: InMemoryData, layerKey: number) => {\n  const index = data.optimisticOrder.indexOf(layerKey);\n  if (index > -1) {\n    data.optimisticOrder.splice(index, 1);\n    data.commutativeKeys.delete(layerKey);\n  }\n\n  clearLayer(data, layerKey);\n};\n\n/** Merges an optimistic layer of links and records into the base data */\nconst squashLayer = (layerKey: number) => {\n  // Hide current dependencies from squashing operations\n  const previousDependencies = currentDependencies;\n  currentDependencies = new Set();\n  currentOperation = 'write';\n\n  const links = currentData!.links.optimistic.get(layerKey);\n  if (links) {\n    for (const entry of links.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeLink(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  const records = currentData!.records.optimistic.get(layerKey);\n  if (records) {\n    for (const entry of records.entries()) {\n      const entityKey = entry[0];\n      const keyMap = entry[1];\n      for (const fieldKey in keyMap)\n        writeRecord(entityKey, fieldKey, keyMap[fieldKey]);\n    }\n  }\n\n  currentDependencies = previousDependencies;\n  deleteLayer(currentData!, layerKey);\n};\n\n/** Return an array of FieldInfo (info on all the fields and their arguments) for a given entity */\nexport const inspectFields = (entityKey: string): FieldInfo[] => {\n  const { links, records } = currentData!;\n  const fieldInfos: FieldInfo[] = [];\n  const seenFieldKeys: Set<string> = new Set();\n  // Update dependencies\n  updateDependencies(entityKey);\n  // Extract FieldInfos to the fieldInfos array for links and records\n  // This also deduplicates by keeping track of fieldKeys in the seenFieldKeys Set\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, links);\n  extractNodeMapFields(fieldInfos, seenFieldKeys, entityKey, records);\n  return fieldInfos;\n};\n\nexport const persistData = () => {\n  if (currentData!.storage) {\n    currentOptimistic = true;\n    currentOperation = 'read';\n    const entries: SerializedEntries = {};\n    for (const key of currentData!.persist.keys()) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      let x: void | Link | EntityField;\n      if ((x = readLink(entityKey, fieldKey)) !== undefined) {\n        entries[key] = `:${stringifyVariables(x)}`;\n      } else if ((x = readRecord(entityKey, fieldKey)) !== undefined) {\n        entries[key] = stringifyVariables(x);\n      } else {\n        entries[key] = undefined;\n      }\n    }\n\n    currentOptimistic = false;\n    currentData!.storage.writeData(entries);\n    currentData!.persist.clear();\n  }\n};\n\nexport const hydrateData = (\n  data: InMemoryData,\n  storage: StorageAdapter,\n  entries: SerializedEntries\n) => {\n  initDataState('write', data, null);\n\n  for (const key in entries) {\n    const value = entries[key];\n    if (value !== undefined) {\n      const { entityKey, fieldKey } = deserializeKeyInfo(key);\n      if (value[0] === ':') {\n        if (readLink(entityKey, fieldKey) === undefined)\n          writeLink(entityKey, fieldKey, JSON.parse(value.slice(1)));\n      } else {\n        if (readRecord(entityKey, fieldKey) === undefined)\n          writeRecord(entityKey, fieldKey, JSON.parse(value));\n      }\n    }\n  }\n\n  data.storage = storage;\n  data.hydrating = false;\n  clearDataState();\n};\n","import type { CombinedError, ErrorLike, FormattedNode } from '@urql/core';\n\nimport type {\n  FieldNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\nimport { Kind } from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport { isDeferred, getTypeCondition, getSelectionSet, getName } from '../ast';\n\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\nimport { hasField, currentOperation, currentOptimistic } from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\n\nimport { getFieldArguments, shouldInclude, isInterfaceOfType } from '../ast';\n\nimport type {\n  Fragments,\n  Variables,\n  DataField,\n  NullArray,\n  Link,\n  Entity,\n  Data,\n} from '../types';\n\nexport interface Context {\n  store: Store;\n  variables: Variables;\n  fragments: Fragments;\n  parentTypeName: string;\n  parentKey: string;\n  parentFieldKey: string;\n  parent: Data;\n  fieldName: string;\n  error: ErrorLike | undefined;\n  partial: boolean;\n  hasNext: boolean;\n  optimistic: boolean;\n  __internal: {\n    path: Array<string | number>;\n    errorMap: { [path: string]: ErrorLike } | undefined;\n  };\n}\n\nexport let contextRef: Context | null = null;\nexport let deferRef = false;\n\n// Checks whether the current data field is a cache miss because of a GraphQLError\nexport const getFieldError = (ctx: Context): ErrorLike | undefined =>\n  ctx.__internal.path.length > 0 && ctx.__internal.errorMap\n    ? ctx.__internal.errorMap[ctx.__internal.path.join('.')]\n    : undefined;\n\nexport const makeContext = (\n  store: Store,\n  variables: Variables,\n  fragments: Fragments,\n  typename: string,\n  entityKey: string,\n  error: CombinedError | undefined\n): Context => {\n  const ctx: Context = {\n    store,\n    variables,\n    fragments,\n    parent: { __typename: typename },\n    parentTypeName: typename,\n    parentKey: entityKey,\n    parentFieldKey: '',\n    fieldName: '',\n    error: undefined,\n    partial: false,\n    hasNext: false,\n    optimistic: currentOptimistic,\n    __internal: {\n      path: [],\n      errorMap: undefined,\n    },\n  };\n\n  if (error && error.graphQLErrors) {\n    for (let i = 0; i < error.graphQLErrors.length; i++) {\n      const graphQLError = error.graphQLErrors[i];\n      if (graphQLError.path && graphQLError.path.length) {\n        if (!ctx.__internal.errorMap)\n          ctx.__internal.errorMap = Object.create(null);\n        ctx.__internal.errorMap![graphQLError.path.join('.')] = graphQLError;\n      }\n    }\n  }\n\n  return ctx;\n};\n\nexport const updateContext = (\n  ctx: Context,\n  data: Data,\n  typename: string,\n  entityKey: string,\n  fieldKey: string,\n  fieldName: string\n) => {\n  contextRef = ctx;\n  ctx.parent = data;\n  ctx.parentTypeName = typename;\n  ctx.parentKey = entityKey;\n  ctx.parentFieldKey = fieldKey;\n  ctx.fieldName = fieldName;\n  ctx.error = getFieldError(ctx);\n};\n\nconst isFragmentHeuristicallyMatching = (\n  node: FormattedNode<InlineFragmentNode | FragmentDefinitionNode>,\n  typename: void | string,\n  entityKey: string,\n  vars: Variables\n) => {\n  if (!typename) return false;\n  const typeCondition = getTypeCondition(node);\n  if (!typeCondition || typename === typeCondition) return true;\n\n  warn(\n    'Heuristic Fragment Matching: A fragment is trying to match against the `' +\n      typename +\n      '` type, ' +\n      'but the type condition is `' +\n      typeCondition +\n      '`. Since GraphQL allows for interfaces `' +\n      typeCondition +\n      '` may be an ' +\n      'interface.\\nA schema needs to be defined for this match to be deterministic, ' +\n      'otherwise the fragment will be matched heuristically!',\n    16\n  );\n\n  return (\n    currentOperation === 'write' ||\n    !getSelectionSet(node).some(node => {\n      if (node.kind !== Kind.FIELD) return false;\n      const fieldKey = keyOfField(getName(node), getFieldArguments(node, vars));\n      return !hasField(entityKey, fieldKey);\n    })\n  );\n};\n\ninterface SelectionIterator {\n  (): FormattedNode<FieldNode> | undefined;\n}\n\nexport const makeSelectionIterator = (\n  typename: void | string,\n  entityKey: string,\n  defer: boolean,\n  selectionSet: FormattedNode<SelectionSet>,\n  ctx: Context\n): SelectionIterator => {\n  let child: SelectionIterator | void;\n  let index = 0;\n\n  return function next() {\n    let node: FormattedNode<FieldNode> | undefined;\n    while (child || index < selectionSet.length) {\n      node = undefined;\n      deferRef = defer;\n      if (child) {\n        if ((node = child())) {\n          return node;\n        } else {\n          child = undefined;\n          if (process.env.NODE_ENV !== 'production') popDebugNode();\n        }\n      } else {\n        const select = selectionSet[index++];\n        if (!shouldInclude(select, ctx.variables)) {\n          /*noop*/\n        } else if (select.kind !== Kind.FIELD) {\n          // A fragment is either referred to by FragmentSpread or inline\n          const fragment =\n            select.kind !== Kind.INLINE_FRAGMENT\n              ? ctx.fragments[getName(select)]\n              : select;\n          if (fragment) {\n            const isMatching =\n              !fragment.typeCondition ||\n              (ctx.store.schema\n                ? isInterfaceOfType(ctx.store.schema, fragment, typename)\n                : isFragmentHeuristicallyMatching(\n                    fragment,\n                    typename,\n                    entityKey,\n                    ctx.variables\n                  ));\n            if (isMatching) {\n              if (process.env.NODE_ENV !== 'production')\n                pushDebugNode(typename, fragment);\n              child = makeSelectionIterator(\n                typename,\n                entityKey,\n                defer || isDeferred(select, ctx.variables),\n                getSelectionSet(fragment),\n                ctx\n              );\n            }\n          }\n        } else if (currentOperation === 'write' || !select._generated) {\n          return select;\n        }\n      }\n    }\n  };\n};\n\nexport const ensureData = (x: DataField): Data | NullArray<Data> | null =>\n  x == null ? null : (x as Data | NullArray<Data>);\n\nexport const ensureLink = (store: Store, ref: Link<Entity>): Link => {\n  if (!ref) {\n    return ref || null;\n  } else if (Array.isArray(ref)) {\n    const link = new Array(ref.length);\n    for (let i = 0, l = link.length; i < l; i++)\n      link[i] = ensureLink(store, ref[i]);\n    return link;\n  }\n\n  const link = store.keyOfEntity(ref);\n  if (!link && ref && typeof ref === 'object') {\n    warn(\n      \"Can't generate a key for link(...) item.\" +\n        '\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        ref.__typename +\n        '`.',\n      12\n    );\n  }\n\n  return link;\n};\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  getDirectives,\n} from '../ast';\n\nimport type {\n  Variables,\n  Data,\n  DataField,\n  Link,\n  OperationRequest,\n  Dependencies,\n  Resolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\nimport { warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\n\nimport {\n  isFieldAvailableOnType,\n  isFieldNullable,\n  isListNullable,\n} from '../ast';\n\nexport interface QueryResult {\n  dependencies: Dependencies;\n  partial: boolean;\n  hasNext: boolean;\n  data: null | Data;\n}\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const __initAnd_query = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data | null | undefined,\n  error?: CombinedError | undefined,\n  key?: number\n): QueryResult => {\n  InMemoryData.initDataState('read', store.data, key);\n  const result = _query(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\n/** Reads a GraphQL query from the cache.\n * @internal\n */\nexport const _query = (\n  store: Store,\n  request: OperationRequest,\n  input?: Data | null | undefined,\n  error?: CombinedError | undefined\n): QueryResult => {\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const rootKey = store.rootFields[operation.operation];\n  const rootSelect = getSelectionSet(operation);\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    rootKey,\n    rootKey,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(rootKey, operation);\n  }\n\n  // NOTE: This may reuse \"previous result data\" as indicated by the\n  // `originalData` argument in readRoot(). This behaviour isn't used\n  // for readSelection() however, which always produces results from\n  // scratch\n  const data =\n    rootKey !== ctx.store.rootFields['query']\n      ? readRoot(ctx, rootKey, rootSelect, input || InMemoryData.makeData())\n      : readSelection(\n          ctx,\n          rootKey,\n          rootSelect,\n          input || InMemoryData.makeData()\n        );\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n    InMemoryData.getCurrentDependencies();\n  }\n\n  return {\n    dependencies: InMemoryData.currentDependencies!,\n    partial: ctx.partial || !data,\n    hasNext: ctx.hasNext,\n    data: data || null,\n  };\n};\n\nconst readRoot = (\n  ctx: Context,\n  entityKey: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data\n): Data => {\n  const typename = ctx.store.rootNames[entityKey]\n    ? entityKey\n    : input.__typename;\n  if (typeof typename !== 'string') {\n    return input;\n  }\n\n  const iterate = makeSelectionIterator(\n    entityKey,\n    entityKey,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  let hasChanged = InMemoryData.currentForeignData;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate())) {\n    const fieldAlias = getFieldAlias(node);\n    const fieldValue = input[fieldAlias];\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField;\n    if (node.selectionSet && fieldValue !== null) {\n      dataFieldValue = readRootField(\n        ctx,\n        getSelectionSet(node),\n        ensureData(fieldValue)\n      );\n    } else {\n      dataFieldValue = fieldValue;\n    }\n\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== fieldValue;\n    if (dataFieldValue !== undefined) output[fieldAlias] = dataFieldValue!;\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n\n  return hasChanged ? output : input;\n};\n\nconst readRootField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  originalData: Link<Data>\n): Link<Data> => {\n  if (Array.isArray(originalData)) {\n    const newData = new Array(originalData.length);\n    let hasChanged = InMemoryData.currentForeignData;\n    for (let i = 0, l = originalData.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the root field's value\n      newData[i] = readRootField(ctx, select, originalData[i]);\n      hasChanged = hasChanged || newData[i] !== originalData[i];\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return hasChanged ? newData : originalData;\n  } else if (originalData === null) {\n    return null;\n  }\n\n  // Write entity to key that falls back to the given parentFieldKey\n  const entityKey = ctx.store.keyOfEntity(originalData);\n  if (entityKey !== null) {\n    // We assume that since this is used for result data this can never be undefined,\n    // since the result data has already been written to the cache\n    return readSelection(ctx, entityKey, select, originalData) || null;\n  } else {\n    return readRoot(ctx, originalData.__typename, select, originalData);\n  }\n};\n\nexport const _queryFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  entity: Partial<Data> | string,\n  variables?: Variables,\n  fragmentName?: string\n): Data | null => {\n  const fragments = getFragments(query);\n\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        6\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'readFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        6\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  if (typeof entity !== 'string' && !entity.__typename)\n    entity.__typename = typename;\n  const entityKey = store.keyOfEntity(entity as Data);\n  if (!entityKey) {\n    warn(\n      \"Can't generate a key for readFragment(...).\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      7\n    );\n\n    return null;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  const result =\n    readSelection(\n      ctx,\n      entityKey,\n      getSelectionSet(fragment),\n      InMemoryData.makeData()\n    ) || null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nfunction getFieldResolver(\n  directives: ReturnType<typeof getDirectives>,\n  typename: string,\n  fieldName: string,\n  ctx: Context\n): Resolver | void {\n  const resolvers = ctx.store.resolvers[typename];\n  const fieldResolver = resolvers && resolvers[fieldName];\n\n  let directiveResolver: Resolver | undefined;\n  for (const name in directives) {\n    const directiveNode = directives[name];\n    if (\n      directiveNode &&\n      name !== 'include' &&\n      name !== 'skip' &&\n      ctx.store.directives[name]\n    ) {\n      directiveResolver = ctx.store.directives[name](\n        getFieldArguments(directiveNode, ctx.variables)\n      );\n      if (process.env.NODE_ENV === 'production') return directiveResolver;\n      break;\n    }\n  }\n\n  if (fieldResolver && directiveResolver) {\n    warn(\n      `A resolver and directive is being used at \"${typename}.${fieldName}\" simultaneously. Only the directive will apply.`,\n      28\n    );\n  }\n\n  return directiveResolver || fieldResolver;\n}\n\nconst readSelection = (\n  ctx: Context,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  input: Data,\n  result?: Data\n): Data | undefined => {\n  const { store } = ctx;\n  const isQuery = key === store.rootFields.query;\n\n  const entityKey = (result && store.keyOfEntity(result)) || key;\n  if (!isQuery && !!ctx.store.rootNames[entityKey]) {\n    warn(\n      'Invalid root traversal: A selection was being read on `' +\n        entityKey +\n        '` which is an uncached root type.\\n' +\n        'The `' +\n        ctx.store.rootFields.mutation +\n        '` and `' +\n        ctx.store.rootFields.subscription +\n        '` types are special ' +\n        'Operation Root Types and cannot be read back from the cache.',\n      25\n    );\n  }\n\n  const typename = !isQuery\n    ? InMemoryData.readRecord(entityKey, '__typename') ||\n      (result && result.__typename)\n    : key;\n\n  if (typeof typename !== 'string') {\n    return;\n  } else if (result && typename !== result.__typename) {\n    warn(\n      'Invalid resolver data: The resolver at `' +\n        entityKey +\n        '` returned an ' +\n        'invalid typename that could not be reconciled with the cache.',\n      8\n    );\n\n    return;\n  }\n\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let hasFields = false;\n  let hasNext = false;\n  let hasChanged = InMemoryData.currentForeignData;\n  let node: FormattedNode<FieldNode> | void;\n  const hasPartials = ctx.partial;\n  const output = InMemoryData.makeData(input);\n  while ((node = iterate()) !== undefined) {\n    // Derive the needed data from our node.\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldAlias = getFieldAlias(node);\n    const directives = getDirectives(node);\n    const resolver = getFieldResolver(directives, typename, fieldName, ctx);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const key = joinKeys(entityKey, fieldKey);\n    const fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n    const resultValue = result ? result[fieldName] : undefined;\n\n    if (process.env.NODE_ENV !== 'production' && store.schema && typename) {\n      isFieldAvailableOnType(store.schema, typename, fieldName);\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n    // We temporarily store the data field in here, but undefined\n    // means that the value is missing from the cache\n    let dataFieldValue: void | DataField = undefined;\n\n    if (fieldName === '__typename') {\n      // We directly assign the typename as it's already available\n      dataFieldValue = typename;\n    } else if (resultValue !== undefined && node.selectionSet === undefined) {\n      // The field is a scalar and can be retrieved directly from the result\n      dataFieldValue = resultValue;\n    } else if (InMemoryData.currentOperation === 'read' && resolver) {\n      // We have a resolver for this field.\n      // Prepare the actual fieldValue, so that the resolver can use it,\n      // as to avoid the user having to do `cache.resolve(parent, info.fieldKey)`\n      // only to get a scalar value.\n      let parent = output;\n      if (node.selectionSet === undefined && fieldValue !== undefined) {\n        parent = {\n          ...output,\n          [fieldAlias]: fieldValue,\n          [fieldName]: fieldValue,\n        };\n      }\n\n      // We have to update the information in context to reflect the info\n      // that the resolver will receive\n      updateContext(ctx, parent, typename, entityKey, fieldKey, fieldName);\n\n      dataFieldValue = resolver(\n        parent,\n        fieldArgs || ({} as Variables),\n        store,\n        ctx\n      );\n\n      if (node.selectionSet) {\n        // When it has a selection set we are resolving an entity with a\n        // subselection. This can either be a list or an object.\n        dataFieldValue = resolveResolverResult(\n          ctx,\n          typename,\n          fieldName,\n          key,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          dataFieldValue,\n          InMemoryData.ownsData(input)\n        );\n      }\n\n      if (\n        store.schema &&\n        dataFieldValue === null &&\n        !isFieldNullable(store.schema, typename, fieldName)\n      ) {\n        // Special case for when null is not a valid value for the\n        // current field\n        return undefined;\n      }\n    } else if (!node.selectionSet) {\n      // The field is a scalar but isn't on the result, so it's retrieved from the cache\n      dataFieldValue = fieldValue;\n    } else if (resultValue !== undefined) {\n      // We start walking the nested resolver result here\n      dataFieldValue = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        key,\n        getSelectionSet(node),\n        (output[fieldAlias] !== undefined\n          ? output[fieldAlias]\n          : input[fieldAlias]) as Data,\n        resultValue,\n        InMemoryData.ownsData(input)\n      );\n    } else {\n      // Otherwise we attempt to get the missing field from the cache\n      const link = InMemoryData.readLink(entityKey, fieldKey);\n\n      if (link !== undefined) {\n        dataFieldValue = resolveLink(\n          ctx,\n          link,\n          typename,\n          fieldName,\n          getSelectionSet(node),\n          (output[fieldAlias] !== undefined\n            ? output[fieldAlias]\n            : input[fieldAlias]) as Data,\n          InMemoryData.ownsData(input)\n        );\n      } else if (typeof fieldValue === 'object' && fieldValue !== null) {\n        // The entity on the field was invalid but can still be recovered\n        dataFieldValue = fieldValue;\n      }\n    }\n\n    // Now that dataFieldValue has been retrieved it'll be set on data\n    // If it's uncached (undefined) but nullable we can continue assembling\n    // a partial query result\n    if (\n      !deferRef &&\n      dataFieldValue === undefined &&\n      (directives.optional ||\n        !!getFieldError(ctx) ||\n        (store.schema && isFieldNullable(store.schema, typename, fieldName)))\n    ) {\n      // The field is uncached or has errored, so it'll be set to null and skipped\n      ctx.partial = true;\n      dataFieldValue = null;\n    } else if (dataFieldValue === null && directives.required) {\n      dataFieldValue = undefined;\n    } else {\n      hasFields = hasFields || fieldName !== '__typename';\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n    // Check for any referential changes in the field's value\n    hasChanged = hasChanged || dataFieldValue !== input[fieldAlias];\n    if (dataFieldValue !== undefined) {\n      output[fieldAlias] = dataFieldValue;\n    } else if (deferRef) {\n      hasNext = true;\n    } else {\n      // If the field isn't deferred or partial then we have to abort and also reset\n      // the partial field\n      ctx.partial = hasPartials;\n      return undefined;\n    }\n  }\n\n  ctx.partial = ctx.partial || hasPartials;\n  ctx.hasNext = ctx.hasNext || hasNext;\n  return isQuery && ctx.partial && !hasFields\n    ? undefined\n    : hasChanged\n    ? output\n    : input;\n};\n\nconst resolveResolverResult = (\n  ctx: Context,\n  typename: string,\n  fieldName: string,\n  key: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  result: void | DataField,\n  isOwnedData: boolean\n): DataField | void => {\n  if (Array.isArray(result)) {\n    const { store } = ctx;\n    // Check whether values of the list may be null; for resolvers we assume\n    // that they can be, since it's user-provided data\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName)\n      : false;\n    const hasPartials = ctx.partial;\n    const data = InMemoryData.makeData(prevData, true);\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      result.length !== prevData.length;\n    for (let i = 0, l = result.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read resolver result\n      const childResult = resolveResolverResult(\n        ctx,\n        typename,\n        fieldName,\n        joinKeys(key, `${i}`),\n        select,\n        prevData != null ? prevData[i] : undefined,\n        result[i],\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childResult === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childResult === undefined && _isListNullable);\n        data[i] = childResult != null ? childResult : null;\n        hasChanged = hasChanged || data[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? data : prevData;\n  } else if (result === null || result === undefined) {\n    return result;\n  } else if (!isOwnedData && prevData === null) {\n    return null;\n  } else if (isDataOrKey(result)) {\n    const data = (prevData || InMemoryData.makeData(prevData)) as Data;\n    return typeof result === 'string'\n      ? readSelection(ctx, result, select, data)\n      : readSelection(ctx, key, select, data, result);\n  } else {\n    warn(\n      'Invalid resolver value: The field at `' +\n        key +\n        '` is a scalar (number, boolean, etc)' +\n        ', but the GraphQL query expects a selection set for this field.',\n      9\n    );\n\n    return undefined;\n  }\n};\n\nconst resolveLink = (\n  ctx: Context,\n  link: Link | Link[],\n  typename: string,\n  fieldName: string,\n  select: FormattedNode<SelectionSet>,\n  prevData: void | null | Data | Data[],\n  isOwnedData: boolean\n): DataField | undefined => {\n  if (Array.isArray(link)) {\n    const { store } = ctx;\n    const _isListNullable = store.schema\n      ? isListNullable(store.schema, typename, fieldName)\n      : false;\n    const newLink = InMemoryData.makeData(prevData, true);\n    const hasPartials = ctx.partial;\n    let hasChanged =\n      InMemoryData.currentForeignData ||\n      !Array.isArray(prevData) ||\n      link.length !== prevData.length;\n    for (let i = 0, l = link.length; i < l; i++) {\n      // Add the current index to the walked path before reading the field's value\n      ctx.__internal.path.push(i);\n      // Recursively read the link\n      const childLink = resolveLink(\n        ctx,\n        link[i],\n        typename,\n        fieldName,\n        select,\n        prevData != null ? prevData[i] : undefined,\n        isOwnedData\n      );\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n      // Check the result for cache-missed values\n      if (childLink === undefined && !_isListNullable) {\n        ctx.partial = hasPartials;\n        return undefined;\n      } else {\n        ctx.partial =\n          ctx.partial || (childLink === undefined && _isListNullable);\n        newLink[i] = childLink || null;\n        hasChanged = hasChanged || newLink[i] !== prevData![i];\n      }\n    }\n\n    return hasChanged ? newLink : (prevData as Data[]);\n  } else if (link === null || (prevData === null && isOwnedData)) {\n    return null;\n  }\n\n  return readSelection(\n    ctx,\n    link,\n    select,\n    (prevData || InMemoryData.makeData(prevData)) as Data\n  );\n};\n\nconst isDataOrKey = (x: any): x is string | Data =>\n  typeof x === 'string' ||\n  (typeof x === 'object' && typeof (x as any).__typename === 'string');\n","import type { FormattedNode, CombinedError } from '@urql/core';\nimport { formatDocument } from '@urql/core';\n\nimport type {\n  FieldNode,\n  DocumentNode,\n  FragmentDefinitionNode,\n} from '@0no-co/graphql.web';\n\nimport type { SelectionSet } from '../ast';\nimport {\n  getFragments,\n  getMainOperation,\n  normalizeVariables,\n  getFieldArguments,\n  isFieldAvailableOnType,\n  getSelectionSet,\n  getName,\n  getFragmentTypeName,\n  getFieldAlias,\n} from '../ast';\n\nimport { invariant, warn, pushDebugNode, popDebugNode } from '../helpers/help';\n\nimport type {\n  NullArray,\n  Variables,\n  Data,\n  Link,\n  OperationRequest,\n  Dependencies,\n  EntityField,\n  OptimisticMutationResolver,\n} from '../types';\n\nimport { joinKeys, keyOfField } from '../store/keys';\nimport type { Store } from '../store/store';\nimport * as InMemoryData from '../store/data';\n\nimport type { Context } from './shared';\nimport {\n  makeSelectionIterator,\n  ensureData,\n  makeContext,\n  updateContext,\n  getFieldError,\n  deferRef,\n} from './shared';\n\nexport interface WriteResult {\n  data: null | Data;\n  dependencies: Dependencies;\n}\n\n/** Writes a GraphQL response to the cache.\n * @internal\n */\nexport const __initAnd_write = (\n  store: Store,\n  request: OperationRequest,\n  data: Data,\n  error?: CombinedError | undefined,\n  key?: number\n): WriteResult => {\n  InMemoryData.initDataState('write', store.data, key || null);\n  const result = _write(store, request, data, error);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const __initAnd_writeOptimistic = (\n  store: Store,\n  request: OperationRequest,\n  key: number\n): WriteResult => {\n  if (process.env.NODE_ENV !== 'production') {\n    invariant(\n      getMainOperation(request.query).operation === 'mutation',\n      'writeOptimistic(...) was called with an operation that is not a mutation.\\n' +\n        'This case is unsupported and should never occur.',\n      10\n    );\n  }\n\n  InMemoryData.initDataState('write', store.data, key, true);\n  const result = _write(store, request, {} as Data, undefined);\n  InMemoryData.clearDataState();\n  return result;\n};\n\nexport const _write = (\n  store: Store,\n  request: OperationRequest,\n  data?: Data,\n  error?: CombinedError | undefined\n) => {\n  if (process.env.NODE_ENV !== 'production') {\n    InMemoryData.getCurrentDependencies();\n  }\n\n  const query = formatDocument(request.query);\n  const operation = getMainOperation(query);\n  const result: WriteResult = {\n    data: data || InMemoryData.makeData(),\n    dependencies: InMemoryData.currentDependencies!,\n  };\n  const kind = store.rootFields[operation.operation];\n\n  const ctx = makeContext(\n    store,\n    normalizeVariables(operation, request.variables),\n    getFragments(query),\n    kind,\n    kind,\n    error\n  );\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(kind, operation);\n  }\n\n  writeSelection(ctx, kind, getSelectionSet(operation), result.data!);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n\n  return result;\n};\n\nexport const _writeFragment = (\n  store: Store,\n  query: FormattedNode<DocumentNode>,\n  data: Partial<Data>,\n  variables?: Variables,\n  fragmentName?: string\n) => {\n  const fragments = getFragments(query);\n  let fragment: FormattedNode<FragmentDefinitionNode>;\n  if (fragmentName) {\n    fragment = fragments[fragmentName]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with a fragment name that does not exist.\\n' +\n          'You provided ' +\n          fragmentName +\n          ' but could only find ' +\n          Object.keys(fragments).join(', ') +\n          '.',\n        11\n      );\n\n      return null;\n    }\n  } else {\n    const names = Object.keys(fragments);\n    fragment = fragments[names[0]]!;\n    if (!fragment) {\n      warn(\n        'writeFragment(...) was called with an empty fragment.\\n' +\n          'You have to call it with at least one fragment in your GraphQL document.',\n        11\n      );\n\n      return null;\n    }\n  }\n\n  const typename = getFragmentTypeName(fragment);\n  const dataToWrite = { __typename: typename, ...data } as Data;\n  const entityKey = store.keyOfEntity(dataToWrite);\n  if (!entityKey) {\n    return warn(\n      \"Can't generate a key for writeFragment(...) data.\\n\" +\n        'You have to pass an `id` or `_id` field or create a custom `keys` config for `' +\n        typename +\n        '`.',\n      12\n    );\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    pushDebugNode(typename, fragment);\n  }\n\n  const ctx = makeContext(\n    store,\n    variables || {},\n    fragments,\n    typename,\n    entityKey,\n    undefined\n  );\n\n  writeSelection(ctx, entityKey, getSelectionSet(fragment), dataToWrite);\n\n  if (process.env.NODE_ENV !== 'production') {\n    popDebugNode();\n  }\n};\n\nconst writeSelection = (\n  ctx: Context,\n  entityKey: undefined | string,\n  select: FormattedNode<SelectionSet>,\n  data: Data\n) => {\n  // These fields determine how we write. The `Query` root type is written\n  // like a normal entity, hence, we use `rootField` with a default to determine\n  // this. All other root names (Subscription & Mutation) are in a different\n  // write mode\n  const rootField = ctx.store.rootNames[entityKey!] || 'query';\n  const isRoot = !!ctx.store.rootNames[entityKey!];\n\n  let typename = isRoot ? entityKey : data.__typename;\n  if (!typename && entityKey && ctx.optimistic) {\n    typename = InMemoryData.readRecord(entityKey, '__typename') as\n      | string\n      | undefined;\n  }\n\n  if (!typename) {\n    warn(\n      \"Couldn't find __typename when writing.\\n\" +\n        \"If you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\",\n      14\n    );\n    return;\n  } else if (!isRoot && entityKey) {\n    InMemoryData.writeRecord(entityKey, '__typename', typename);\n  }\n\n  const updates = ctx.store.updates[typename];\n  const iterate = makeSelectionIterator(\n    typename,\n    entityKey || typename,\n    deferRef,\n    select,\n    ctx\n  );\n\n  let node: FormattedNode<FieldNode> | void;\n  while ((node = iterate())) {\n    const fieldName = getName(node);\n    const fieldArgs = getFieldArguments(node, ctx.variables);\n    const fieldKey = keyOfField(fieldName, fieldArgs);\n    const fieldAlias = getFieldAlias(node);\n    let fieldValue = data[ctx.optimistic ? fieldName : fieldAlias];\n\n    if (\n      // Skip typename fields and assume they've already been written above\n      fieldName === '__typename' ||\n      // Fields marked as deferred that aren't defined must be skipped\n      // Otherwise, we also ignore undefined values in optimistic updaters\n      (fieldValue === undefined &&\n        (deferRef || (ctx.optimistic && rootField === 'query')))\n    ) {\n      continue;\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ctx.store.schema && typename && fieldName !== '__typename') {\n        isFieldAvailableOnType(ctx.store.schema, typename, fieldName);\n      }\n    }\n\n    // Add the current alias to the walked path before processing the field's value\n    ctx.__internal.path.push(fieldAlias);\n\n    // Execute optimistic mutation functions on root fields, or execute recursive functions\n    // that have been returned on optimistic objects\n    let resolver: OptimisticMutationResolver | undefined;\n    if (ctx.optimistic && rootField === 'mutation') {\n      resolver = ctx.store.optimisticMutations[fieldName];\n      if (!resolver) continue;\n    } else if (ctx.optimistic && typeof fieldValue === 'function') {\n      resolver = fieldValue as any;\n    }\n\n    // Execute the field-level resolver to retrieve its data\n    if (resolver) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n      fieldValue = ensureData(resolver(fieldArgs || {}, ctx.store, ctx));\n    }\n\n    if (fieldValue === undefined) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (\n          !entityKey ||\n          !InMemoryData.hasField(entityKey, fieldKey) ||\n          (ctx.optimistic && !InMemoryData.readRecord(entityKey, '__typename'))\n        ) {\n          const expected =\n            node.selectionSet === undefined\n              ? 'scalar (number, boolean, etc)'\n              : 'selection set';\n\n          warn(\n            'Invalid undefined: The field at `' +\n              fieldKey +\n              '` is `undefined`, but the GraphQL query expects a ' +\n              expected +\n              ' for this field.',\n            13\n          );\n        }\n      }\n\n      continue; // Skip this field\n    }\n\n    if (node.selectionSet) {\n      // Process the field and write links for the child entities that have been written\n      if (entityKey && rootField === 'query') {\n        const key = joinKeys(entityKey, fieldKey);\n        const link = writeField(\n          ctx,\n          getSelectionSet(node),\n          ensureData(fieldValue),\n          key,\n          ctx.optimistic\n            ? InMemoryData.readLink(entityKey || typename, fieldKey)\n            : undefined\n        );\n        InMemoryData.writeLink(entityKey || typename, fieldKey, link);\n      } else {\n        writeField(ctx, getSelectionSet(node), ensureData(fieldValue));\n      }\n    } else if (entityKey && rootField === 'query') {\n      // This is a leaf node, so we're setting the field's value directly\n      InMemoryData.writeRecord(\n        entityKey || typename,\n        fieldKey,\n        (fieldValue !== null || !getFieldError(ctx)\n          ? fieldValue\n          : undefined) as EntityField\n      );\n    }\n\n    // We run side-effect updates after the default, normalized updates\n    // so that the data is already available in-store if necessary\n    const updater = updates && updates[fieldName];\n    if (updater) {\n      // We have to update the context to reflect up-to-date ResolveInfo\n      updateContext(\n        ctx,\n        data,\n        typename,\n        entityKey || typename,\n        fieldKey,\n        fieldName\n      );\n\n      data[fieldName] = fieldValue;\n      updater(data, fieldArgs || {}, ctx.store, ctx);\n    }\n\n    // After processing the field, remove the current alias from the path again\n    ctx.__internal.path.pop();\n  }\n};\n\n// A pattern to match typenames of types that are likely never keyable\nconst KEYLESS_TYPE_RE = /^__|PageInfo|(Connection|Edge)$/;\n\nconst writeField = (\n  ctx: Context,\n  select: FormattedNode<SelectionSet>,\n  data: null | Data | NullArray<Data>,\n  parentFieldKey?: string,\n  prevLink?: Link\n): Link | undefined => {\n  if (Array.isArray(data)) {\n    const newData = new Array(data.length);\n    for (let i = 0, l = data.length; i < l; i++) {\n      // Add the current index to the walked path before processing the link\n      ctx.__internal.path.push(i);\n      // Append the current index to the parentFieldKey fallback\n      const indexKey = parentFieldKey\n        ? joinKeys(parentFieldKey, `${i}`)\n        : undefined;\n      // Recursively write array data\n      const prevIndex = prevLink != null ? prevLink[i] : undefined;\n      const links = writeField(ctx, select, data[i], indexKey, prevIndex);\n      // Link cannot be expressed as a recursive type\n      newData[i] = links as string | null;\n      // After processing the field, remove the current index from the path\n      ctx.__internal.path.pop();\n    }\n\n    return newData;\n  } else if (data === null) {\n    return getFieldError(ctx) ? undefined : null;\n  }\n\n  const entityKey =\n    ctx.store.keyOfEntity(data) ||\n    (typeof prevLink === 'string' ? prevLink : null);\n  const typename = data.__typename;\n\n  if (\n    parentFieldKey &&\n    !ctx.store.keys[data.__typename] &&\n    entityKey === null &&\n    typeof typename === 'string' &&\n    !KEYLESS_TYPE_RE.test(typename)\n  ) {\n    warn(\n      'Invalid key: The GraphQL query at the field at `' +\n        parentFieldKey +\n        '` has a selection set, ' +\n        'but no key could be generated for the data at this field.\\n' +\n        'You have to request `id` or `_id` fields for all selection sets or create ' +\n        'a custom `keys` config for `' +\n        typename +\n        '`.\\n' +\n        'Entities without keys will be embedded directly on the parent entity. ' +\n        'If this is intentional, create a `keys` config for `' +\n        typename +\n        '` that always returns null.',\n      15\n    );\n  }\n\n  const childKey = entityKey || parentFieldKey;\n  writeSelection(ctx, childKey, select, data);\n  return childKey || null;\n};\n","import type { TypedDocumentNode } from '@urql/core';\nimport { formatDocument, createRequest } from '@urql/core';\n\nimport type {\n  Cache,\n  FieldInfo,\n  ResolverConfig,\n  DataField,\n  Variables,\n  FieldArgs,\n  Link,\n  Data,\n  QueryInput,\n  UpdatesConfig,\n  OptimisticMutationConfig,\n  KeyingConfig,\n  Entity,\n  CacheExchangeOpts,\n  DirectivesConfig,\n} from '../types';\n\nimport { invariant } from '../helpers/help';\nimport { contextRef, ensureLink } from '../operations/shared';\nimport { _query, _queryFragment } from '../operations/query';\nimport { _write, _writeFragment } from '../operations/write';\nimport { invalidateEntity } from '../operations/invalidate';\nimport { keyOfField } from './keys';\nimport * as InMemoryData from './data';\n\nimport type { SchemaIntrospector } from '../ast';\nimport {\n  buildClientSchema,\n  expectValidKeyingConfig,\n  expectValidUpdatesConfig,\n  expectValidResolversConfig,\n  expectValidOptimisticMutationsConfig,\n} from '../ast';\n\ntype DocumentNode = TypedDocumentNode<any, any>;\ntype RootField = 'query' | 'mutation' | 'subscription';\n\n/** Implementation of the {@link Cache} interface as created internally by the {@link cacheExchange}.\n * @internal\n */\nexport class Store<\n  C extends Partial<CacheExchangeOpts> = Partial<CacheExchangeOpts>,\n> implements Cache\n{\n  data: InMemoryData.InMemoryData;\n\n  directives: DirectivesConfig;\n  resolvers: ResolverConfig;\n  updates: UpdatesConfig;\n  optimisticMutations: OptimisticMutationConfig;\n  keys: KeyingConfig;\n  globalIDs: Set<string> | boolean;\n  schema?: SchemaIntrospector;\n\n  rootFields: { query: string; mutation: string; subscription: string };\n  rootNames: { [name: string]: RootField | void };\n\n  constructor(opts?: C) {\n    if (!opts) opts = {} as C;\n\n    this.resolvers = opts.resolvers || {};\n    this.directives = opts.directives || {};\n    this.optimisticMutations = opts.optimistic || {};\n    this.keys = opts.keys || {};\n\n    this.globalIDs = Array.isArray(opts.globalIDs)\n      ? new Set(opts.globalIDs)\n      : !!opts.globalIDs;\n\n    let queryName = 'Query';\n    let mutationName = 'Mutation';\n    let subscriptionName = 'Subscription';\n    if (opts.schema) {\n      const schema = buildClientSchema(opts.schema);\n      queryName = schema.query || queryName;\n      mutationName = schema.mutation || mutationName;\n      subscriptionName = schema.subscription || subscriptionName;\n      // Only add schema introspector if it has types info\n      if (schema.types) this.schema = schema;\n    }\n\n    this.updates = opts.updates || {};\n\n    this.rootFields = {\n      query: queryName,\n      mutation: mutationName,\n      subscription: subscriptionName,\n    };\n\n    this.rootNames = {\n      [queryName]: 'query',\n      [mutationName]: 'mutation',\n      [subscriptionName]: 'subscription',\n    };\n\n    this.data = InMemoryData.make(queryName);\n\n    if (this.schema && process.env.NODE_ENV !== 'production') {\n      expectValidKeyingConfig(this.schema, this.keys);\n      expectValidUpdatesConfig(this.schema, this.updates);\n      expectValidResolversConfig(this.schema, this.resolvers);\n      expectValidOptimisticMutationsConfig(\n        this.schema,\n        this.optimisticMutations\n      );\n    }\n  }\n\n  keyOfField(fieldName: string, fieldArgs?: FieldArgs) {\n    return keyOfField(fieldName, fieldArgs);\n  }\n\n  keyOfEntity(data: Entity) {\n    // In resolvers and updaters we may have a specific parent\n    // object available that can be used to skip to a specific parent\n    // key directly without looking at its incomplete properties\n    if (contextRef && data === contextRef.parent) {\n      return contextRef.parentKey;\n    } else if (data == null || typeof data === 'string') {\n      return data || null;\n    } else if (!data.__typename) {\n      return null;\n    } else if (this.rootNames[data.__typename]) {\n      return data.__typename;\n    }\n\n    let key: string | null = null;\n    if (this.keys[data.__typename]) {\n      key = this.keys[data.__typename](data) || null;\n    } else if (data.id != null) {\n      key = `${data.id}`;\n    } else if (data._id != null) {\n      key = `${data._id}`;\n    }\n\n    const typename = data.__typename;\n    const globalID =\n      this.globalIDs === true ||\n      (this.globalIDs && this.globalIDs.has(typename));\n    return globalID || !key ? key : `${typename}:${key}`;\n  }\n\n  resolve(\n    entity: Entity,\n    field: string,\n    args?: FieldArgs\n  ): DataField | undefined {\n    let fieldValue: DataField | undefined = null;\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      const fieldKey = keyOfField(field, args);\n      fieldValue = InMemoryData.readRecord(entityKey, fieldKey);\n      if (fieldValue === undefined)\n        fieldValue = InMemoryData.readLink(entityKey, fieldKey);\n    }\n    return fieldValue;\n  }\n\n  resolveFieldByKey(entity: Entity, field: string, args?: FieldArgs) {\n    return this.resolve(entity, field, args);\n  }\n\n  invalidate(entity: Entity, field?: string, args?: FieldArgs) {\n    const entityKey = this.keyOfEntity(entity);\n\n    invariant(\n      entityKey,\n      \"Can't generate a key for invalidate(...).\\n\" +\n        'You have to pass an id or _id field or create a custom `keys` field for `' +\n        (typeof entity === 'object'\n          ? (entity as Data).__typename\n          : entity + '`.'),\n      19\n    );\n\n    invalidateEntity(entityKey, field, args);\n  }\n\n  inspectFields(entity: Entity): FieldInfo[] {\n    const entityKey = this.keyOfEntity(entity);\n    return entityKey ? InMemoryData.inspectFields(entityKey) : [];\n  }\n\n  updateQuery<T = Data, V = Variables>(\n    input: QueryInput<T, V>,\n    updater: (data: T | null) => T | null\n  ): void {\n    const request = createRequest(input.query, input.variables!);\n    const output = updater(this.readQuery(request));\n    if (output !== null) {\n      _write(this, request, output as any, undefined);\n    }\n  }\n\n  readQuery<T = Data, V = Variables>(input: QueryInput<T, V>): T | null {\n    const request = createRequest(input.query, input.variables!);\n    return _query(this, request, undefined, undefined).data as T | null;\n  }\n\n  readFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    entity: string | Data | T,\n    variables?: V,\n    fragmentName?: string\n  ): T | null {\n    return _queryFragment(\n      this,\n      formatDocument(fragment),\n      entity as Data,\n      variables as any,\n      fragmentName\n    ) as T | null;\n  }\n\n  writeFragment<T = Data, V = Variables>(\n    fragment: DocumentNode | TypedDocumentNode<T, V>,\n    data: T,\n    variables?: V,\n    fragmentName?: string\n  ): void {\n    _writeFragment(\n      this,\n      formatDocument(fragment),\n      data as Data,\n      variables as any,\n      fragmentName\n    );\n  }\n\n  link(\n    entity: Entity,\n    field: string,\n    args: FieldArgs,\n    link: Link<Entity>\n  ): void;\n\n  link(entity: Entity, field: string, link: Link<Entity>): void;\n\n  link(\n    entity: Entity,\n    field: string,\n    ...rest: [FieldArgs, Link<Entity>] | [Link<Entity>]\n  ): void {\n    const args = rest.length === 2 ? rest[0] : null;\n    const link = rest.length === 2 ? rest[1] : rest[0];\n    const entityKey = this.keyOfEntity(entity);\n    if (entityKey) {\n      InMemoryData.writeLink(\n        entityKey,\n        keyOfField(field, args),\n        ensureLink(this, link)\n      );\n    }\n  }\n}\n","import type {\n  IntrospectionQuery,\n  IntrospectionTypeRef,\n  IntrospectionInputValue,\n  IntrospectionType,\n} from './graphql';\n\nexport interface SchemaField {\n  name: string;\n  type: IntrospectionTypeRef;\n  args(): Record<string, IntrospectionInputValue | void>;\n}\n\nexport interface SchemaObject {\n  name: string;\n  kind: 'INTERFACE' | 'OBJECT';\n  interfaces(): Record<string, unknown>;\n  fields(): Record<string, SchemaField | void>;\n}\n\nexport interface SchemaUnion {\n  name: string;\n  kind: 'UNION';\n  types(): Record<string, unknown>;\n}\n\nexport interface SchemaIntrospector {\n  query: string | null;\n  mutation: string | null;\n  subscription: string | null;\n  types?: Map<string, SchemaObject | SchemaUnion>;\n  isSubType(abstract: string, possible: string): boolean;\n}\n\nexport interface PartialIntrospectionSchema {\n  queryType: { name: string; kind?: any };\n  mutationType?: { name: string; kind?: any } | null;\n  subscriptionType?: { name: string; kind?: any } | null;\n  types?: readonly any[];\n}\n\nexport type IntrospectionData =\n  | IntrospectionQuery\n  | { __schema: PartialIntrospectionSchema };\n\nexport const buildClientSchema = ({\n  __schema,\n}: IntrospectionData): SchemaIntrospector => {\n  const typemap: Map<string, SchemaObject | SchemaUnion> = new Map();\n\n  const buildNameMap = <T extends { name: string }>(\n    arr: ReadonlyArray<T>\n  ): (() => { [name: string]: T }) => {\n    let map: Record<string, T> | void;\n    return () => {\n      if (!map) {\n        map = {};\n        for (let i = 0; i < arr.length; i++) map[arr[i].name] = arr[i];\n      }\n      return map;\n    };\n  };\n\n  const buildType = (\n    type: IntrospectionType\n  ): SchemaObject | SchemaUnion | void => {\n    switch (type.kind) {\n      case 'OBJECT':\n      case 'INTERFACE':\n        return {\n          name: type.name,\n          kind: type.kind as 'OBJECT' | 'INTERFACE',\n          interfaces: buildNameMap(type.interfaces || []),\n          fields: buildNameMap(\n            type.fields!.map((field: any) => ({\n              name: field.name,\n              type: field.type,\n              args: buildNameMap(field.args),\n            }))\n          ),\n        } as SchemaObject;\n      case 'UNION':\n        return {\n          name: type.name,\n          kind: type.kind as 'UNION',\n          types: buildNameMap(type.possibleTypes || []),\n        } as SchemaUnion;\n    }\n  };\n\n  const schema: SchemaIntrospector = {\n    query: __schema.queryType ? __schema.queryType.name : null,\n    mutation: __schema.mutationType ? __schema.mutationType.name : null,\n    subscription: __schema.subscriptionType\n      ? __schema.subscriptionType.name\n      : null,\n    types: undefined,\n    isSubType(abstract: string, possible: string) {\n      const abstractType = typemap.get(abstract);\n      const possibleType = typemap.get(possible);\n      if (!abstractType || !possibleType) {\n        return false;\n      } else if (abstractType.kind === 'UNION') {\n        return !!abstractType.types()[possible];\n      } else if (\n        abstractType.kind !== 'OBJECT' &&\n        possibleType.kind === 'OBJECT'\n      ) {\n        return !!possibleType.interfaces()[abstract];\n      } else {\n        return abstract === possible;\n      }\n    },\n  };\n\n  if (__schema.types) {\n    schema.types = typemap;\n    for (let i = 0; i < __schema.types.length; i++) {\n      const type = __schema.types[i];\n      if (type && type.name) {\n        const out = buildType(type);\n        if (out) typemap.set(type.name, out);\n      }\n    }\n  }\n\n  return schema;\n};\n","import * as InMemoryData from '../store/data';\nimport { keyOfField } from '../store/keys';\nimport type { FieldArgs } from '../types';\n\ninterface PartialFieldInfo {\n  fieldKey: string;\n}\n\nexport const invalidateEntity = (\n  entityKey: string,\n  field?: string,\n  args?: FieldArgs\n) => {\n  const fields: PartialFieldInfo[] = field\n    ? [{ fieldKey: keyOfField(field, args) }]\n    : InMemoryData.inspectFields(entityKey);\n\n  for (let i = 0, l = fields.length; i < l; i++) {\n    const { fieldKey } = fields[i];\n    if (InMemoryData.readLink(entityKey, fieldKey) !== undefined) {\n      InMemoryData.writeLink(entityKey, fieldKey, undefined);\n    } else {\n      InMemoryData.writeRecord(entityKey, fieldKey, undefined);\n    }\n  }\n};\n","import type { Operation, RequestPolicy, OperationDebugMeta } from '@urql/core';\nimport { makeOperation } from '@urql/core';\n\n// Returns the given operation result with added cacheOutcome meta field\nexport const addMetadata = (\n  operation: Operation,\n  meta: OperationDebugMeta\n): Operation =>\n  makeOperation(operation.kind, operation, {\n    ...operation.context,\n    meta: {\n      ...operation.context.meta,\n      ...meta,\n    },\n  });\n\n// Copy an operation and change the requestPolicy to skip the cache\nexport const toRequestPolicy = (\n  operation: Operation,\n  requestPolicy: RequestPolicy\n): Operation => {\n  return makeOperation(operation.kind, operation, {\n    ...operation.context,\n    requestPolicy,\n  });\n};\n","import type {\n  Exchange,\n  Operation,\n  OperationResult,\n  RequestPolicy,\n  CacheOutcome,\n} from '@urql/core';\nimport { formatDocument, makeOperation } from '@urql/core';\n\nimport type { Source } from 'wonka';\nimport {\n  filter,\n  map,\n  merge,\n  pipe,\n  share,\n  fromArray,\n  mergeMap,\n  empty,\n} from 'wonka';\n\nimport { _query } from './operations/query';\nimport { _write } from './operations/write';\nimport { addMetadata, toRequestPolicy } from './helpers/operation';\nimport { filterVariables, getMainOperation } from './ast';\nimport { Store } from './store/store';\nimport type { Data, Dependencies, CacheExchangeOpts } from './types';\n\nimport {\n  initDataState,\n  clearDataState,\n  noopDataState,\n  hydrateData,\n  reserveLayer,\n} from './store/data';\n\ninterface OperationResultWithMeta extends Partial<OperationResult> {\n  operation: Operation;\n  outcome: CacheOutcome;\n  dependencies: Dependencies;\n  hasNext: boolean;\n}\n\ntype Operations = Set<number>;\ntype OperationMap = Map<number, Operation>;\ntype ResultMap = Map<number, Data | null>;\ntype OptimisticDependencies = Map<number, Dependencies>;\ntype DependentOperations = Map<string, Operations>;\n\n/** Exchange factory that creates a normalized cache exchange.\n *\n * @param opts - A {@link CacheExchangeOpts} configuration object.\n * @returns the created normalized cache {@link Exchange}.\n *\n * @remarks\n * Graphcache is a normalized cache, enabled by using the `cacheExchange`\n * in place of `@urql/core`’s. A normalized GraphQL cache uses typenames\n * and key fields in the result to share a single copy for each unique\n * entity across all queries.\n *\n * The `cacheExchange` may be passed a {@link CacheExchangeOpts} object\n * to define custom resolvers, custom updates for mutations,\n * optimistic updates, or to add custom key fields per type.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache} for the full Graphcache docs.\n */\nexport const cacheExchange =\n  <C extends Partial<CacheExchangeOpts>>(opts?: C): Exchange =>\n  ({ forward, client, dispatchDebug }) => {\n    const store = new Store<C>(opts);\n\n    if (opts && opts.storage) {\n      store.data.hydrating = true;\n      opts.storage.readData().then(entries => {\n        hydrateData(store.data, opts!.storage!, entries);\n      });\n    }\n\n    const optimisticKeysToDependencies: OptimisticDependencies = new Map();\n    const mutationResultBuffer: OperationResult[] = [];\n    const operations: OperationMap = new Map();\n    const results: ResultMap = new Map();\n    const blockedDependencies: Dependencies = new Set();\n    const requestedRefetch: Operations = new Set();\n    const deps: DependentOperations = new Map();\n\n    let reexecutingOperations: Operations = new Set();\n    let dependentOperations: Operations = new Set();\n\n    const isBlockedByOptimisticUpdate = (\n      dependencies: Dependencies\n    ): boolean => {\n      for (const dep of dependencies.values())\n        if (blockedDependencies.has(dep)) return true;\n      return false;\n    };\n\n    const collectPendingOperations = (\n      pendingOperations: Operations,\n      dependencies: undefined | Dependencies\n    ) => {\n      if (dependencies) {\n        // Collect operations that will be updated due to cache changes\n        for (const dep of dependencies.values()) {\n          const keys = deps.get(dep);\n          if (keys) for (const key of keys.values()) pendingOperations.add(key);\n        }\n      }\n    };\n\n    const executePendingOperations = (\n      operation: Operation,\n      pendingOperations: Operations,\n      isOptimistic: boolean\n    ) => {\n      // Reexecute collected operations and delete them from the mapping\n      for (const key of pendingOperations.values()) {\n        if (key !== operation.key) {\n          const op = operations.get(key);\n          if (op) {\n            // Collect all dependent operations if the reexecuting operation is a query\n            if (operation.kind === 'query') dependentOperations.add(key);\n            let policy: RequestPolicy = 'cache-first';\n            if (requestedRefetch.has(key)) {\n              requestedRefetch.delete(key);\n              policy = 'cache-and-network';\n            }\n            client.reexecuteOperation(toRequestPolicy(op, policy));\n          }\n        }\n      }\n\n      if (!isOptimistic) {\n        // Upon completion, all dependent operations become reexecuting operations, preventing\n        // them from reexecuting prior operations again, causing infinite loops\n        const _reexecutingOperations = reexecutingOperations;\n        if (operation.kind === 'query') {\n          (reexecutingOperations = dependentOperations).add(operation.key);\n        }\n        (dependentOperations = _reexecutingOperations).clear();\n      }\n    };\n\n    // This registers queries with the data layer to ensure commutativity\n    const prepareForwardedOperation = (operation: Operation) => {\n      let optimistic = false;\n      if (operation.kind === 'query') {\n        // Pre-reserve the position of the result layer\n        reserveLayer(store.data, operation.key);\n        operations.set(operation.key, operation);\n      } else if (operation.kind === 'teardown') {\n        // Delete reference to operation if any exists to release it\n        operations.delete(operation.key);\n        results.delete(operation.key);\n        reexecutingOperations.delete(operation.key);\n        // Mark operation layer as done\n        noopDataState(store.data, operation.key);\n        return operation;\n      } else if (\n        operation.kind === 'mutation' &&\n        operation.context.requestPolicy !== 'network-only'\n      ) {\n        operations.set(operation.key, operation);\n        // This executes an optimistic update for mutations and registers it if necessary\n        initDataState('write', store.data, operation.key, true, false);\n        const { dependencies } = _write(\n          store,\n          operation as any,\n          undefined,\n          undefined\n        );\n        clearDataState();\n        if (dependencies.size) {\n          // Update blocked optimistic dependencies\n          for (const dep of dependencies.values()) blockedDependencies.add(dep);\n          // Store optimistic dependencies for update\n          optimisticKeysToDependencies.set(operation.key, dependencies);\n          // Update related queries\n          const pendingOperations: Operations = new Set();\n          collectPendingOperations(pendingOperations, dependencies);\n          executePendingOperations(operation, pendingOperations, true);\n          // Mark operation as optimistic\n          optimistic = true;\n        }\n      }\n\n      return makeOperation(\n        operation.kind,\n        {\n          key: operation.key,\n          query: formatDocument(operation.query),\n          variables: operation.variables\n            ? filterVariables(\n                getMainOperation(operation.query),\n                operation.variables\n              )\n            : operation.variables,\n        },\n        { ...operation.context, optimistic }\n      );\n    };\n\n    // This updates the known dependencies for the passed operation\n    const updateDependencies = (op: Operation, dependencies: Dependencies) => {\n      for (const dep of dependencies.values()) {\n        let depOps = deps.get(dep);\n        if (!depOps) deps.set(dep, (depOps = new Set()));\n        depOps.add(op.key);\n      }\n    };\n\n    // Retrieves a query result from cache and adds an `isComplete` hint\n    // This hint indicates whether the result is \"complete\" or not\n    const operationResultFromCache = (\n      operation: Operation\n    ): OperationResultWithMeta => {\n      initDataState('read', store.data, undefined, false, false);\n      const result = _query(\n        store,\n        operation,\n        results.get(operation.key),\n        undefined\n      );\n      clearDataState();\n      const cacheOutcome: CacheOutcome = result.data\n        ? !result.partial && !result.hasNext\n          ? 'hit'\n          : 'partial'\n        : 'miss';\n\n      results.set(operation.key, result.data);\n      operations.set(operation.key, operation);\n      updateDependencies(operation, result.dependencies);\n\n      return {\n        outcome: cacheOutcome,\n        operation,\n        data: result.data,\n        dependencies: result.dependencies,\n        hasNext: result.hasNext,\n      };\n    };\n\n    // Take any OperationResult and update the cache with it\n    const updateCacheWithResult = (\n      result: OperationResult,\n      pendingOperations: Operations\n    ): OperationResult => {\n      // Retrieve the original operation to get unfiltered variables\n      const operation =\n        operations.get(result.operation.key) || result.operation;\n      if (operation.kind === 'mutation') {\n        // Collect previous dependencies that have been written for optimistic updates\n        const dependencies = optimisticKeysToDependencies.get(operation.key);\n        collectPendingOperations(pendingOperations, dependencies);\n        optimisticKeysToDependencies.delete(operation.key);\n      }\n\n      if (operation.kind === 'subscription' || result.hasNext)\n        reserveLayer(store.data, operation.key, true);\n\n      let queryDependencies: undefined | Dependencies;\n      let data: Data | null = result.data;\n      if (data) {\n        // Write the result to cache and collect all dependencies that need to be\n        // updated\n        initDataState('write', store.data, operation.key, false, false);\n        const writeDependencies = _write(\n          store,\n          operation,\n          data,\n          result.error\n        ).dependencies;\n        clearDataState();\n        collectPendingOperations(pendingOperations, writeDependencies);\n        const prevData =\n          operation.kind === 'query' ? results.get(operation.key) : null;\n        initDataState(\n          'read',\n          store.data,\n          operation.key,\n          false,\n          prevData !== data\n        );\n        const queryResult = _query(\n          store,\n          operation,\n          prevData || data,\n          result.error\n        );\n        clearDataState();\n        data = queryResult.data;\n        if (operation.kind === 'query') {\n          // Collect the query's dependencies for future pending operation updates\n          queryDependencies = queryResult.dependencies;\n          collectPendingOperations(pendingOperations, queryDependencies);\n          results.set(operation.key, data);\n        }\n      } else {\n        noopDataState(store.data, operation.key);\n      }\n\n      // Update this operation's dependencies if it's a query\n      if (queryDependencies) {\n        updateDependencies(result.operation, queryDependencies);\n      }\n\n      return {\n        operation,\n        data,\n        error: result.error,\n        extensions: result.extensions,\n        hasNext: result.hasNext,\n        stale: result.stale,\n      };\n    };\n\n    return operations$ => {\n      // Filter by operations that are cacheable and attempt to query them from the cache\n      const cacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind === 'query' && op.context.requestPolicy !== 'network-only'\n        ),\n        map(operationResultFromCache),\n        share\n      );\n\n      const nonCacheOps$ = pipe(\n        operations$,\n        filter(\n          op =>\n            op.kind !== 'query' || op.context.requestPolicy === 'network-only'\n        )\n      );\n\n      // Rebound operations that are incomplete, i.e. couldn't be queried just from the cache\n      const cacheMissOps$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome === 'miss' &&\n            res.operation.context.requestPolicy !== 'cache-only' &&\n            !isBlockedByOptimisticUpdate(res.dependencies) &&\n            !reexecutingOperations.has(res.operation.key)\n        ),\n        map(res => {\n          dispatchDebug({\n            type: 'cacheMiss',\n            message: 'The result could not be retrieved from the cache',\n            operation: res.operation,\n          });\n          return addMetadata(res.operation, { cacheOutcome: 'miss' });\n        })\n      );\n\n      // Resolve OperationResults that the cache was able to assemble completely and trigger\n      // a network request if the current operation's policy is cache-and-network\n      const cacheResult$ = pipe(\n        cacheOps$,\n        filter(\n          res =>\n            res.outcome !== 'miss' ||\n            res.operation.context.requestPolicy === 'cache-only'\n        ),\n        map((res: OperationResultWithMeta): OperationResult => {\n          const { requestPolicy } = res.operation.context;\n\n          // We reexecute requests marked as `cache-and-network`, and partial responses,\n          // if we wouldn't cause a request loop\n          const shouldReexecute =\n            requestPolicy !== 'cache-only' &&\n            (res.hasNext ||\n              requestPolicy === 'cache-and-network' ||\n              (requestPolicy === 'cache-first' &&\n                res.outcome === 'partial' &&\n                !reexecutingOperations.has(res.operation.key)));\n\n          const result: OperationResult = {\n            operation: addMetadata(res.operation, {\n              cacheOutcome: res.outcome,\n            }),\n            data: res.data,\n            error: res.error,\n            extensions: res.extensions,\n            stale: shouldReexecute && !res.hasNext,\n            hasNext: shouldReexecute && res.hasNext,\n          };\n\n          if (!shouldReexecute) {\n            /*noop*/\n          } else if (!isBlockedByOptimisticUpdate(res.dependencies)) {\n            client.reexecuteOperation(\n              toRequestPolicy(\n                operations.get(res.operation.key) || res.operation,\n                'network-only'\n              )\n            );\n          } else if (requestPolicy === 'cache-and-network') {\n            requestedRefetch.add(res.operation.key);\n          }\n\n          dispatchDebug({\n            type: 'cacheHit',\n            message: `A requested operation was found and returned from the cache.`,\n            operation: res.operation,\n            data: {\n              value: result,\n            },\n          });\n\n          return result;\n        })\n      );\n\n      // Forward operations that aren't cacheable and rebound operations\n      // Also update the cache with any network results\n      const result$ = pipe(\n        merge([nonCacheOps$, cacheMissOps$]),\n        map(prepareForwardedOperation),\n        forward\n      );\n\n      // Results that can immediately be resolved\n      const nonOptimisticResults$ = pipe(\n        result$,\n        filter(\n          result => !optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        map(result => {\n          const pendingOperations: Operations = new Set();\n          // Update the cache with the incoming API result\n          const cacheResult = updateCacheWithResult(result, pendingOperations);\n          // Execute all dependent queries\n          executePendingOperations(result.operation, pendingOperations, false);\n          return cacheResult;\n        })\n      );\n\n      // Prevent mutations that were previously optimistic from being flushed\n      // immediately and instead clear them out slowly\n      const optimisticMutationCompletion$ = pipe(\n        result$,\n        filter(result =>\n          optimisticKeysToDependencies.has(result.operation.key)\n        ),\n        mergeMap((result: OperationResult): Source<OperationResult> => {\n          const length = mutationResultBuffer.push(result);\n          if (length < optimisticKeysToDependencies.size) {\n            return empty;\n          }\n\n          for (let i = 0; i < mutationResultBuffer.length; i++) {\n            reserveLayer(store.data, mutationResultBuffer[i].operation.key);\n          }\n\n          blockedDependencies.clear();\n\n          const results: OperationResult[] = [];\n          const pendingOperations: Operations = new Set();\n\n          let bufferedResult: OperationResult | void;\n          while ((bufferedResult = mutationResultBuffer.shift()))\n            results.push(\n              updateCacheWithResult(bufferedResult, pendingOperations)\n            );\n\n          // Execute all dependent queries as a single batch\n          executePendingOperations(result.operation, pendingOperations, false);\n\n          return fromArray(results);\n        })\n      );\n\n      return merge([\n        nonOptimisticResults$,\n        optimisticMutationCompletion$,\n        cacheResult$,\n      ]);\n    };\n  };\n","import { pipe, share, merge, makeSubject, filter, onPush } from 'wonka';\n\nimport type {\n  Operation,\n  OperationResult,\n  Exchange,\n  ExchangeIO,\n  CombinedError,\n  RequestPolicy,\n} from '@urql/core';\nimport { stringifyDocument, createRequest, makeOperation } from '@urql/core';\n\nimport type {\n  SerializedRequest,\n  CacheExchangeOpts,\n  StorageAdapter,\n} from './types';\nimport { cacheExchange } from './cacheExchange';\nimport { toRequestPolicy } from './helpers/operation';\n\nconst policyLevel = {\n  'cache-only': 0,\n  'cache-first': 1,\n  'network-only': 2,\n  'cache-and-network': 3,\n} as const;\n\n/** Input parameters for the {@link offlineExchange}.\n * @remarks\n * This configuration object extends the {@link CacheExchangeOpts}\n * as the `offlineExchange` extends the regular {@link cacheExchange}.\n */\nexport interface OfflineExchangeOpts extends CacheExchangeOpts {\n  /** Configures an offline storage adapter for Graphcache.\n   *\n   * @remarks\n   * A {@link StorageAdapter} allows Graphcache to write data to an external,\n   * asynchronous storage, and hydrate data from it when it first loads.\n   * This allows you to preserve normalized data between restarts/reloads.\n   *\n   * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n   */\n  storage: StorageAdapter;\n  /** Predicate function to determine whether a {@link CombinedError} hints at a network error.\n   *\n   * @remarks\n   * Not ever {@link CombinedError} means that the device is offline and by default\n   * the `offlineExchange` will check for common network error messages and check\n   * `navigator.onLine`. However, when `isOfflineError` is passed it can replace\n   * the default offline detection.\n   */\n  isOfflineError?(\n    error: undefined | CombinedError,\n    result: OperationResult\n  ): boolean;\n}\n\n/** Exchange factory that creates a normalized cache exchange in Offline Support mode.\n *\n * @param opts - A {@link OfflineExchangeOpts} configuration object.\n * @returns the created normalized, offline cache {@link Exchange}.\n *\n * @remarks\n * The `offlineExchange` is a wrapper around the regular {@link cacheExchange}\n * which adds logic via the {@link OfflineExchangeOpts.storage} adapter to\n * recognize when it’s offline, when to retry failed mutations, and how\n * to handle longer periods of being offline.\n *\n * @see {@link https://urql.dev/goto/docs/graphcache/offline} for the full Offline Support docs.\n */\nexport const offlineExchange =\n  <C extends OfflineExchangeOpts>(opts: C): Exchange =>\n  input => {\n    const { storage } = opts;\n\n    const isOfflineError =\n      opts.isOfflineError ||\n      ((error: undefined | CombinedError) =>\n        error &&\n        error.networkError &&\n        !error.response &&\n        ((typeof navigator !== 'undefined' && navigator.onLine === false) ||\n          /request failed|failed to fetch|network\\s?error/i.test(\n            error.networkError.message\n          )));\n\n    if (\n      storage &&\n      storage.onOnline &&\n      storage.readMetadata &&\n      storage.writeMetadata\n    ) {\n      const { forward: outerForward, client, dispatchDebug } = input;\n      const { source: reboundOps$, next } = makeSubject<Operation>();\n      const failedQueue: Operation[] = [];\n      let hasRehydrated = false;\n      let isFlushingQueue = false;\n\n      const updateMetadata = () => {\n        if (hasRehydrated) {\n          const requests: SerializedRequest[] = [];\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation') {\n              requests.push({\n                query: stringifyDocument(operation.query),\n                variables: operation.variables,\n                extensions: operation.extensions,\n              });\n            }\n          }\n          storage.writeMetadata!(requests);\n        }\n      };\n\n      const filterQueue = (key: number) => {\n        for (let i = failedQueue.length - 1; i >= 0; i--)\n          if (failedQueue[i].key === key) failedQueue.splice(i, 1);\n      };\n\n      const flushQueue = () => {\n        if (!isFlushingQueue) {\n          const sent = new Set<number>();\n          isFlushingQueue = true;\n          for (let i = 0; i < failedQueue.length; i++) {\n            const operation = failedQueue[i];\n            if (operation.kind === 'mutation' || !sent.has(operation.key)) {\n              sent.add(operation.key);\n              if (operation.kind !== 'subscription') {\n                next(makeOperation('teardown', operation));\n                let overridePolicy: RequestPolicy = 'cache-first';\n                for (let i = 0; i < failedQueue.length; i++) {\n                  const { requestPolicy } = failedQueue[i].context;\n                  if (policyLevel[requestPolicy] > policyLevel[overridePolicy])\n                    overridePolicy = requestPolicy;\n                }\n                next(toRequestPolicy(operation, overridePolicy));\n              } else {\n                next(toRequestPolicy(operation, 'cache-first'));\n              }\n            }\n          }\n          isFlushingQueue = false;\n          failedQueue.length = 0;\n          updateMetadata();\n        }\n      };\n\n      const forward: ExchangeIO = ops$ => {\n        return pipe(\n          outerForward(ops$),\n          filter(res => {\n            if (\n              hasRehydrated &&\n              res.operation.kind === 'mutation' &&\n              res.operation.context.optimistic &&\n              isOfflineError(res.error, res)\n            ) {\n              failedQueue.push(res.operation);\n              updateMetadata();\n              return false;\n            }\n\n            return true;\n          }),\n          share\n        );\n      };\n\n      const cacheResults$ = cacheExchange({\n        ...opts,\n        storage: {\n          ...storage,\n          readData() {\n            const hydrate = storage.readData();\n            return {\n              async then(onEntries) {\n                const mutations = await storage.readMetadata!();\n                for (let i = 0; mutations && i < mutations.length; i++) {\n                  failedQueue.push(\n                    client.createRequestOperation(\n                      'mutation',\n                      createRequest(mutations[i].query, mutations[i].variables),\n                      mutations[i].extensions\n                    )\n                  );\n                }\n                onEntries!(await hydrate);\n                storage.onOnline!(flushQueue);\n                hasRehydrated = true;\n                flushQueue();\n              },\n            };\n          },\n        },\n      })({\n        client,\n        dispatchDebug,\n        forward,\n      });\n\n      return operations$ => {\n        const opsAndRebound$ = merge([\n          reboundOps$,\n          pipe(\n            operations$,\n            onPush(operation => {\n              if (operation.kind === 'query' && !hasRehydrated) {\n                failedQueue.push(operation);\n              } else if (operation.kind === 'teardown') {\n                filterQueue(operation.key);\n              }\n            })\n          ),\n        ]);\n\n        return pipe(\n          cacheResults$(opsAndRebound$),\n          filter(res => {\n            if (res.operation.kind === 'query') {\n              if (isOfflineError(res.error, res)) {\n                next(toRequestPolicy(res.operation, 'cache-only'));\n                failedQueue.push(res.operation);\n                return false;\n              } else if (!hasRehydrated) {\n                filterQueue(res.operation.key);\n              }\n            }\n            return true;\n          })\n        );\n      };\n    }\n\n    return cacheExchange(opts)(input);\n  };\n"],"names":["helpUrl","cache","Set","currentDebugStack","popDebugNode","pop","pushDebugNode","typename","node","identifier","kind","Kind","INLINE_FRAGMENT","OPERATION_DEFINITION","name","value","operation","FRAGMENT_DEFINITION","push","getDebugOutput","length","join","invariant","condition","message","code","errorMessage","process","env","NODE_ENV","error","Error","warn","has","console","add","EMPTY_DIRECTIVES","getDirectives","_directives","getName","getFragmentTypeName","typeCondition","getFieldAlias","alias","emptySelectionSet","getSelectionSet","selectionSet","selections","getTypeCondition","getFieldArguments","vars","args","arguments","i","l","arg","valueFromASTUntyped","filterVariables","input","variableDefinitions","variable","normalizeVariables","def","undefined","defaultValue","key","getMainOperation","doc","definitions","getFragments","fragments","shouldInclude","directives","include","skip","directive","isDeferred","defer","argument","BUILTIN_NAME","isFieldNullable","schema","fieldName","field","getField","type","isListNullable","ofType","isFieldAvailableOnType","indexOf","isInterfaceOfType","types","get","expectAbstractType","expectObjectType","isSubType","fields","warnAboutResolver","keyOfField","stringifyVariables","joinKeys","parentKey","fieldInfoOfKey","fieldKey","parenIndex","slice","JSON","parse","deserializeKeyInfo","dotIndex","entityKey","replace","currentOwnership","currentDataMapping","currentData","currentOptimisticKey","currentOperation","currentDependencies","currentForeignData","currentOptimistic","makeData","data","isArray","newData","set","ownsData","initDataState","operationType","layerKey","isOptimistic","isForeignData","WeakSet","WeakMap","hydrating","optimisticOrder","commutativeKeys","reserveLayer","splice","delete","createLayer","deleteLayer","clearDataState","getCurrentDependencies","dirtyKeys","squashLayer","storage","setTimeout","gc","persistData","noopDataState","deferredKeys","setNode","map","keymap","optimistic","base","entity","Object","create","getNode","updateRCForLink","link","by","Array","updateRCForEntity","count","refCount","newCount","extractNodeFields","fieldInfos","seenFieldKeys","extractNodeMapFields","keys","records","linkNode","links","updateDependencies","queryRootKey","updatePersist","persist","serializeKeys","readRecord","readLink","writeRecord","hasField","writeLink","entityLinks","hasNext","index","clearLayer","unshift","Map","previousDependencies","entry","entries","keyMap","inspectFields","x","writeData","clear","contextRef","deferRef","getFieldError","ctx","__internal","path","errorMap","makeContext","store","variables","parent","__typename","parentTypeName","parentFieldKey","partial","graphQLErrors","graphQLError","updateContext","isFragmentHeuristicallyMatching","some","FIELD","makeSelectionIterator","child","next","select","fragment","_generated","ensureData","ensureLink","ref","keyOfEntity","_query","request","query","formatDocument","rootKey","rootFields","rootSelect","readRoot","InMemoryData","readSelection","dependencies","rootNames","iterate","hasChanged","output","fieldAlias","fieldValue","dataFieldValue","readRootField","originalData","getFieldResolver","resolvers","fieldResolver","directiveResolver","directiveNode","result","isQuery","mutation","subscription","hasFields","hasPartials","fieldArgs","resolver","resultValue","resolveResolverResult","resolveLink","optional","required","prevData","isOwnedData","_isListNullable","childResult","isDataOrKey","newLink","childLink","_write","writeSelection","rootField","isRoot","updates","optimisticMutations","writeField","updater","KEYLESS_TYPE_RE","prevLink","indexKey","test","childKey","Store","constructor","opts","this","globalIDs","queryName","mutationName","subscriptionName","buildClientSchema","__schema","typemap","buildNameMap","arr","buildType","interfaces","possibleTypes","queryType","mutationType","subscriptionType","abstract","possible","abstractType","possibleType","out","expectValidKeyingConfig","expectValidUpdatesConfig","addition","expectValidResolversConfig","validQueries","resolverQuery","Query","validTypeProperties","resolverProperty","expectValidOptimisticMutationsConfig","validMutations","id","_id","resolve","resolveFieldByKey","invalidate","invalidateEntity","updateQuery","createRequest","readQuery","readFragment","fragmentName","_queryFragment","writeFragment","_writeFragment","dataToWrite","rest","addMetadata","meta","makeOperation","context","toRequestPolicy","requestPolicy","cacheExchange","forward","client","dispatchDebug","readData","then","hydrateData","optimisticKeysToDependencies","mutationResultBuffer","operations","results","blockedDependencies","requestedRefetch","deps","reexecutingOperations","dependentOperations","isBlockedByOptimisticUpdate","dep","values","collectPendingOperations","pendingOperations","executePendingOperations","op","policy","reexecuteOperation","_reexecutingOperations","prepareForwardedOperation","size","depOps","operationResultFromCache","cacheOutcome","outcome","updateCacheWithResult","queryDependencies","writeDependencies","queryResult","extensions","stale","operations$","cacheOps$","share","filter","nonCacheOps$","cacheMissOps$","res","source","cacheResult$","shouldReexecute","result$","merge","nonOptimisticResults$","cacheResult","optimisticMutationCompletion$","mergeMap","empty","bufferedResult","shift","fromArray","policyLevel","offlineExchange","isOfflineError","networkError","response","navigator","onLine","onOnline","readMetadata","writeMetadata","outerForward","reboundOps$","makeSubject","failedQueue","hasRehydrated","isFlushingQueue","updateMetadata","requests","stringifyDocument","filterQueue","flushQueue","sent","overridePolicy","cacheResults$","hydrate","async","onEntries","mutations","createRequestOperation","ops$","opsAndRebound$","onPush"],"mappings":"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"}